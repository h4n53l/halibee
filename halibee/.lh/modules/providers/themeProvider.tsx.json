{
    "sourceFile": "modules/providers/themeProvider.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 18,
            "patches": [
                {
                    "date": 1630104071822,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1630104096402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,29 @@\n+import { ThemeContext } from \"../contexts/themeContext\";\r\n+\r\n+export const ThemeProvider = ({ initialTheme, children }) => {\r\n+    const [theme, setTheme] = React.useState(getInitialTheme);\r\n+  \r\n+    const checkTheme = (existing) => {\r\n+      const root = window.document.documentElement;\r\n+      const isDark = existing === 'dark';\r\n+  \r\n+      root.classList.remove(isDark ? 'light' : 'dark');\r\n+      root.classList.add(existing);\r\n+  \r\n+      localStorage.setItem('current-theme', existing);\r\n+    };\r\n+  \r\n+    if (initialTheme) {\r\n+      checkTheme(initialTheme);\r\n+    }\r\n+  \r\n+    useEffect(() => {\r\n+      checkTheme(theme);\r\n+    }, [theme]);\r\n+  \r\n+    return (\r\n+      <ThemeContext.Provider value={{ theme, setTheme }}>\r\n+        {children}\r\n+      </ThemeContext.Provider>\r\n+    );\r\n+  };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1630104118295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,30 @@\n+import { useEffect } from \"react\";\r\n+import { ThemeContext } from \"../contexts/themeContext\";\r\n+\r\n+export const ThemeProvider = ({ initialTheme, children }) => {\r\n+    const [theme, setTheme] = useState(getInitialTheme);\r\n+  \r\n+    const checkTheme = (existing) => {\r\n+      const root = window.document.documentElement;\r\n+      const isDark = existing === 'dark';\r\n+  \r\n+      root.classList.remove(isDark ? 'light' : 'dark');\r\n+      root.classList.add(existing);\r\n+  \r\n+      localStorage.setItem('current-theme', existing);\r\n+    };\r\n+  \r\n+    if (initialTheme) {\r\n+      checkTheme(initialTheme);\r\n+    }\r\n+  \r\n+    useEffect(() => {\r\n+      checkTheme(theme);\r\n+    }, [theme]);\r\n+  \r\n+    return (\r\n+      <ThemeContext.Provider value={{ theme, setTheme }}>\r\n+        {children}\r\n+      </ThemeContext.Provider>\r\n+    );\r\n+  };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1630104124483,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,30 @@\n+import { useEffect, useState } from \"react\";\r\n+import { ThemeContext } from \"../contexts/themeContext\";\r\n+\r\n+export const ThemeProvider = ({ initialTheme, children }) => {\r\n+    const [theme, setTheme] = useState(getInitialTheme);\r\n+  \r\n+    const checkTheme = (existing) => {\r\n+      const root = window.document.documentElement;\r\n+      const isDark = existing === 'dark';\r\n+  \r\n+      root.classList.remove(isDark ? 'light' : 'dark');\r\n+      root.classList.add(existing);\r\n+  \r\n+      localStorage.setItem('current-theme', existing);\r\n+    };\r\n+  \r\n+    if (initialTheme) {\r\n+      checkTheme(initialTheme);\r\n+    }\r\n+  \r\n+    useEffect(() => {\r\n+      checkTheme(theme);\r\n+    }, [theme]);\r\n+  \r\n+    return (\r\n+      <ThemeContext.Provider value={{ theme, setTheme }}>\r\n+        {children}\r\n+      </ThemeContext.Provider>\r\n+    );\r\n+  };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1630108246790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import { useEffect, useState } from \"react\";\r\n-import { ThemeContext } from \"../contexts/themeContext\";\r\n+import { getInitialTheme, ThemeContext } from \"../contexts/themeContext\";\r\n \r\n-export const ThemeProvider = ({ initialTheme, children }) => {\r\n+export const ThemeProvider = ({ initialTheme<, children }) => {\r\n     const [theme, setTheme] = useState(getInitialTheme);\r\n   \r\n     const checkTheme = (existing) => {\r\n       const root = window.document.documentElement;\r\n@@ -26,91 +26,5 @@\n       <ThemeContext.Provider value={{ theme, setTheme }}>\r\n         {children}\r\n       </ThemeContext.Provider>\r\n     );\r\n-  };\n-import { useEffect } from \"react\";\r\n-import { ThemeContext } from \"../contexts/themeContext\";\r\n-\r\n-export const ThemeProvider = ({ initialTheme, children }) => {\r\n-    const [theme, setTheme] = useState(getInitialTheme);\r\n-  \r\n-    const checkTheme = (existing) => {\r\n-      const root = window.document.documentElement;\r\n-      const isDark = existing === 'dark';\r\n-  \r\n-      root.classList.remove(isDark ? 'light' : 'dark');\r\n-      root.classList.add(existing);\r\n-  \r\n-      localStorage.setItem('current-theme', existing);\r\n-    };\r\n-  \r\n-    if (initialTheme) {\r\n-      checkTheme(initialTheme);\r\n-    }\r\n-  \r\n-    useEffect(() => {\r\n-      checkTheme(theme);\r\n-    }, [theme]);\r\n-  \r\n-    return (\r\n-      <ThemeContext.Provider value={{ theme, setTheme }}>\r\n-        {children}\r\n-      </ThemeContext.Provider>\r\n-    );\r\n-  };\n-import { ThemeContext } from \"../contexts/themeContext\";\r\n-\r\n-export const ThemeProvider = ({ initialTheme, children }) => {\r\n-    const [theme, setTheme] = React.useState(getInitialTheme);\r\n-  \r\n-    const checkTheme = (existing) => {\r\n-      const root = window.document.documentElement;\r\n-      const isDark = existing === 'dark';\r\n-  \r\n-      root.classList.remove(isDark ? 'light' : 'dark');\r\n-      root.classList.add(existing);\r\n-  \r\n-      localStorage.setItem('current-theme', existing);\r\n-    };\r\n-  \r\n-    if (initialTheme) {\r\n-      checkTheme(initialTheme);\r\n-    }\r\n-  \r\n-    useEffect(() => {\r\n-      checkTheme(theme);\r\n-    }, [theme]);\r\n-  \r\n-    return (\r\n-      <ThemeContext.Provider value={{ theme, setTheme }}>\r\n-        {children}\r\n-      </ThemeContext.Provider>\r\n-    );\r\n-  };\n-export const ThemeProvider = ({ initialTheme, children }) => {\r\n-    const [theme, setTheme] = React.useState(getInitialTheme);\r\n-  \r\n-    const checkTheme = (existing) => {\r\n-      const root = window.document.documentElement;\r\n-      const isDark = existing === 'dark';\r\n-  \r\n-      root.classList.remove(isDark ? 'light' : 'dark');\r\n-      root.classList.add(existing);\r\n-  \r\n-      localStorage.setItem('current-theme', existing);\r\n-    };\r\n-  \r\n-    if (initialTheme) {\r\n-      checkTheme(initialTheme);\r\n-    }\r\n-  \r\n-    React.useEffect(() => {\r\n-      checkTheme(theme);\r\n-    }, [theme]);\r\n-  \r\n-    return (\r\n-      <ThemeContext.Provider value={{ theme, setTheme }}>\r\n-        {children}\r\n-      </ThemeContext.Provider>\r\n-    );\r\n   };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1630108254486,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,30 @@\n+import { useEffect, useState } from \"react\";\r\n+import { getInitialTheme, ThemeContext } from \"../contexts/themeContext\";\r\n+\r\n+export const ThemeProvider = ({ initialTheme<any>, children }) => {\r\n+    const [theme, setTheme] = useState(getInitialTheme);\r\n+  \r\n+    const checkTheme = (existing) => {\r\n+      const root = window.document.documentElement;\r\n+      const isDark = existing === 'dark';\r\n+  \r\n+      root.classList.remove(isDark ? 'light' : 'dark');\r\n+      root.classList.add(existing);\r\n+  \r\n+      localStorage.setItem('current-theme', existing);\r\n+    };\r\n+  \r\n+    if (initialTheme) {\r\n+      checkTheme(initialTheme);\r\n+    }\r\n+  \r\n+    useEffect(() => {\r\n+      checkTheme(theme);\r\n+    }, [theme]);\r\n+  \r\n+    return (\r\n+      <ThemeContext.Provider value={{ theme, setTheme }}>\r\n+        {children}\r\n+      </ThemeContext.Provider>\r\n+    );\r\n+  };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1630108262271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,30 @@\n+import { useEffect, useState } from \"react\";\r\n+import { getInitialTheme, ThemeContext } from \"../contexts/themeContext\";\r\n+\r\n+export const ThemeProvider = ({ initialTheme, children }) => {\r\n+    const [theme, setTheme] = useState(getInitialTheme);\r\n+  \r\n+    const checkTheme = (existing) => {\r\n+      const root = window.document.documentElement;\r\n+      const isDark = existing === 'dark';\r\n+  \r\n+      root.classList.remove(isDark ? 'light' : 'dark');\r\n+      root.classList.add(existing);\r\n+  \r\n+      localStorage.setItem('current-theme', existing);\r\n+    };\r\n+  \r\n+    if (initialTheme) {\r\n+      checkTheme(initialTheme);\r\n+    }\r\n+  \r\n+    useEffect(() => {\r\n+      checkTheme(theme);\r\n+    }, [theme]);\r\n+  \r\n+    return (\r\n+      <ThemeContext.Provider value={{ theme, setTheme }}>\r\n+        {children}\r\n+      </ThemeContext.Provider>\r\n+    );\r\n+  };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1630108267866,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,68 +1,10 @@\n import { useEffect, useState } from \"react\";\r\n import { getInitialTheme, ThemeContext } from \"../contexts/themeContext\";\r\n \r\n-export const ThemeProvider = ({ initialTheme, children }) => {\r\n-    const [theme, setTheme] = useState(getInitialTheme);\r\n-  \r\n-    const checkTheme = (existing) => {\r\n-      const root = window.document.documentElement;\r\n-      const isDark = existing === 'dark';\r\n-  \r\n-      root.classList.remove(isDark ? 'light' : 'dark');\r\n-      root.classList.add(existing);\r\n-  \r\n-      localStorage.setItem('current-theme', existing);\r\n-    };\r\n-  \r\n-    if (initialTheme) {\r\n-      checkTheme(initialTheme);\r\n-    }\r\n-  \r\n-    useEffect(() => {\r\n-      checkTheme(theme);\r\n-    }, [theme]);\r\n-  \r\n-    return (\r\n-      <ThemeContext.Provider value={{ theme, setTheme }}>\r\n-        {children}\r\n-      </ThemeContext.Provider>\r\n-    );\r\n-  };\n-import { useEffect, useState } from \"react\";\r\n-import { getInitialTheme, ThemeContext } from \"../contexts/themeContext\";\r\n \r\n-export const ThemeProvider = ({ initialTheme<any>, children }) => {\r\n-    const [theme, setTheme] = useState(getInitialTheme);\r\n-  \r\n-    const checkTheme = (existing) => {\r\n-      const root = window.document.documentElement;\r\n-      const isDark = existing === 'dark';\r\n-  \r\n-      root.classList.remove(isDark ? 'light' : 'dark');\r\n-      root.classList.add(existing);\r\n-  \r\n-      localStorage.setItem('current-theme', existing);\r\n-    };\r\n-  \r\n-    if (initialTheme) {\r\n-      checkTheme(initialTheme);\r\n-    }\r\n-  \r\n-    useEffect(() => {\r\n-      checkTheme(theme);\r\n-    }, [theme]);\r\n-  \r\n-    return (\r\n-      <ThemeContext.Provider value={{ theme, setTheme }}>\r\n-        {children}\r\n-      </ThemeContext.Provider>\r\n-    );\r\n-  };\n-import { useEffect, useState } from \"react\";\r\n-import { getInitialTheme, ThemeContext } from \"../contexts/themeContext\";\r\n \r\n-export const ThemeProvider = ({ initialTheme<, children }) => {\r\n+export const ThemeProvider = ({ initialTheme, children }) => {\r\n     const [theme, setTheme] = useState(getInitialTheme);\r\n   \r\n     const checkTheme = (existing) => {\r\n       const root = window.document.documentElement;\r\n"
                },
                {
                    "date": 1630108277033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import { useEffect, useState } from \"react\";\r\n import { getInitialTheme, ThemeContext } from \"../contexts/themeContext\";\r\n \r\n+cnst\r\n \r\n-\r\n export const ThemeProvider = ({ initialTheme, children }) => {\r\n     const [theme, setTheme] = useState(getInitialTheme);\r\n   \r\n     const checkTheme = (existing) => {\r\n"
                },
                {
                    "date": 1630108282968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,32 @@\n+import { useEffect, useState } from \"react\";\r\n+import { getInitialTheme, ThemeContext } from \"../contexts/themeContext\";\r\n+\r\n+const \r\n+\r\n+export const ThemeProvider = ({ initialTheme, children }) => {\r\n+    const [theme, setTheme] = useState(getInitialTheme);\r\n+  \r\n+    const checkTheme = (existing) => {\r\n+      const root = window.document.documentElement;\r\n+      const isDark = existing === 'dark';\r\n+  \r\n+      root.classList.remove(isDark ? 'light' : 'dark');\r\n+      root.classList.add(existing);\r\n+  \r\n+      localStorage.setItem('current-theme', existing);\r\n+    };\r\n+  \r\n+    if (initialTheme) {\r\n+      checkTheme(initialTheme);\r\n+    }\r\n+  \r\n+    useEffect(() => {\r\n+      checkTheme(theme);\r\n+    }, [theme]);\r\n+  \r\n+    return (\r\n+      <ThemeContext.Provider value={{ theme, setTheme }}>\r\n+        {children}\r\n+      </ThemeContext.Provider>\r\n+    );\r\n+  };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1630108289780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,32 @@\n+import { useEffect, useState } from \"react\";\r\n+import { getInitialTheme, ThemeContext } from \"../contexts/themeContext\";\r\n+\r\n+const initialTheme\r\n+\r\n+export const ThemeProvider = ({ initialTheme, children }) => {\r\n+    const [theme, setTheme] = useState(getInitialTheme);\r\n+  \r\n+    const checkTheme = (existing) => {\r\n+      const root = window.document.documentElement;\r\n+      const isDark = existing === 'dark';\r\n+  \r\n+      root.classList.remove(isDark ? 'light' : 'dark');\r\n+      root.classList.add(existing);\r\n+  \r\n+      localStorage.setItem('current-theme', existing);\r\n+    };\r\n+  \r\n+    if (initialTheme) {\r\n+      checkTheme(initialTheme);\r\n+    }\r\n+  \r\n+    useEffect(() => {\r\n+      checkTheme(theme);\r\n+    }, [theme]);\r\n+  \r\n+    return (\r\n+      <ThemeContext.Provider value={{ theme, setTheme }}>\r\n+        {children}\r\n+      </ThemeContext.Provider>\r\n+    );\r\n+  };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1630108299198,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,32 @@\n+import { useEffect, useState } from \"react\";\r\n+import { getInitialTheme, ThemeContext } from \"../contexts/themeContext\";\r\n+\r\n+const initialTheme: s\r\n+\r\n+export const ThemeProvider = ({ initialTheme, children }) => {\r\n+    const [theme, setTheme] = useState(getInitialTheme);\r\n+  \r\n+    const checkTheme = (existing) => {\r\n+      const root = window.document.documentElement;\r\n+      const isDark = existing === 'dark';\r\n+  \r\n+      root.classList.remove(isDark ? 'light' : 'dark');\r\n+      root.classList.add(existing);\r\n+  \r\n+      localStorage.setItem('current-theme', existing);\r\n+    };\r\n+  \r\n+    if (initialTheme) {\r\n+      checkTheme(initialTheme);\r\n+    }\r\n+  \r\n+    useEffect(() => {\r\n+      checkTheme(theme);\r\n+    }, [theme]);\r\n+  \r\n+    return (\r\n+      <ThemeContext.Provider value={{ theme, setTheme }}>\r\n+        {children}\r\n+      </ThemeContext.Provider>\r\n+    );\r\n+  };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1630108354901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,32 @@\n+import { useEffect, useState } from \"react\";\r\n+import { getInitialTheme, ThemeContext } from \"../contexts/themeContext\";\r\n+\r\n+\r\n+\r\n+export const ThemeProvider = ({ initialTheme, children }) => {\r\n+    const [theme, setTheme] = useState(getInitialTheme);\r\n+  \r\n+    const checkTheme = (existing) => {\r\n+      const root = window.document.documentElement;\r\n+      const isDark = existing === 'dark';\r\n+  \r\n+      root.classList.remove(isDark ? 'light' : 'dark');\r\n+      root.classList.add(existing);\r\n+  \r\n+      localStorage.setItem('current-theme', existing);\r\n+    };\r\n+  \r\n+    if (initialTheme) {\r\n+      checkTheme(initialTheme);\r\n+    }\r\n+  \r\n+    useEffect(() => {\r\n+      checkTheme(theme);\r\n+    }, [theme]);\r\n+  \r\n+    return (\r\n+      <ThemeContext.Provider value={{ theme, setTheme }}>\r\n+        {children}\r\n+      </ThemeContext.Provider>\r\n+    );\r\n+  };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1630108487313,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import { getInitialTheme, ThemeContext } from \"../contexts/themeContext\";\r\n \r\n \r\n \r\n-export const ThemeProvider = ({ initialTheme, children }) => {\r\n+export const ThemeProvider = ({ initialTheme: string, children }) => {\r\n     const [theme, setTheme] = useState(getInitialTheme);\r\n   \r\n     const checkTheme = (existing) => {\r\n       const root = window.document.documentElement;\r\n@@ -28,133 +28,5 @@\n       <ThemeContext.Provider value={{ theme, setTheme }}>\r\n         {children}\r\n       </ThemeContext.Provider>\r\n     );\r\n-  };\n-import { useEffect, useState } from \"react\";\r\n-import { getInitialTheme, ThemeContext } from \"../contexts/themeContext\";\r\n-\r\n-const initialTheme: s\r\n-\r\n-export const ThemeProvider = ({ initialTheme, children }) => {\r\n-    const [theme, setTheme] = useState(getInitialTheme);\r\n-  \r\n-    const checkTheme = (existing) => {\r\n-      const root = window.document.documentElement;\r\n-      const isDark = existing === 'dark';\r\n-  \r\n-      root.classList.remove(isDark ? 'light' : 'dark');\r\n-      root.classList.add(existing);\r\n-  \r\n-      localStorage.setItem('current-theme', existing);\r\n-    };\r\n-  \r\n-    if (initialTheme) {\r\n-      checkTheme(initialTheme);\r\n-    }\r\n-  \r\n-    useEffect(() => {\r\n-      checkTheme(theme);\r\n-    }, [theme]);\r\n-  \r\n-    return (\r\n-      <ThemeContext.Provider value={{ theme, setTheme }}>\r\n-        {children}\r\n-      </ThemeContext.Provider>\r\n-    );\r\n-  };\n-import { useEffect, useState } from \"react\";\r\n-import { getInitialTheme, ThemeContext } from \"../contexts/themeContext\";\r\n-\r\n-const initialTheme\r\n-\r\n-export const ThemeProvider = ({ initialTheme, children }) => {\r\n-    const [theme, setTheme] = useState(getInitialTheme);\r\n-  \r\n-    const checkTheme = (existing) => {\r\n-      const root = window.document.documentElement;\r\n-      const isDark = existing === 'dark';\r\n-  \r\n-      root.classList.remove(isDark ? 'light' : 'dark');\r\n-      root.classList.add(existing);\r\n-  \r\n-      localStorage.setItem('current-theme', existing);\r\n-    };\r\n-  \r\n-    if (initialTheme) {\r\n-      checkTheme(initialTheme);\r\n-    }\r\n-  \r\n-    useEffect(() => {\r\n-      checkTheme(theme);\r\n-    }, [theme]);\r\n-  \r\n-    return (\r\n-      <ThemeContext.Provider value={{ theme, setTheme }}>\r\n-        {children}\r\n-      </ThemeContext.Provider>\r\n-    );\r\n-  };\n-import { useEffect, useState } from \"react\";\r\n-import { getInitialTheme, ThemeContext } from \"../contexts/themeContext\";\r\n-\r\n-const \r\n-\r\n-export const ThemeProvider = ({ initialTheme, children }) => {\r\n-    const [theme, setTheme] = useState(getInitialTheme);\r\n-  \r\n-    const checkTheme = (existing) => {\r\n-      const root = window.document.documentElement;\r\n-      const isDark = existing === 'dark';\r\n-  \r\n-      root.classList.remove(isDark ? 'light' : 'dark');\r\n-      root.classList.add(existing);\r\n-  \r\n-      localStorage.setItem('current-theme', existing);\r\n-    };\r\n-  \r\n-    if (initialTheme) {\r\n-      checkTheme(initialTheme);\r\n-    }\r\n-  \r\n-    useEffect(() => {\r\n-      checkTheme(theme);\r\n-    }, [theme]);\r\n-  \r\n-    return (\r\n-      <ThemeContext.Provider value={{ theme, setTheme }}>\r\n-        {children}\r\n-      </ThemeContext.Provider>\r\n-    );\r\n-  };\n-import { useEffect, useState } from \"react\";\r\n-import { getInitialTheme, ThemeContext } from \"../contexts/themeContext\";\r\n-\r\n-cnst\r\n-\r\n-export const ThemeProvider = ({ initialTheme, children }) => {\r\n-    const [theme, setTheme] = useState(getInitialTheme);\r\n-  \r\n-    const checkTheme = (existing) => {\r\n-      const root = window.document.documentElement;\r\n-      const isDark = existing === 'dark';\r\n-  \r\n-      root.classList.remove(isDark ? 'light' : 'dark');\r\n-      root.classList.add(existing);\r\n-  \r\n-      localStorage.setItem('current-theme', existing);\r\n-    };\r\n-  \r\n-    if (initialTheme) {\r\n-      checkTheme(initialTheme);\r\n-    }\r\n-  \r\n-    useEffect(() => {\r\n-      checkTheme(theme);\r\n-    }, [theme]);\r\n-  \r\n-    return (\r\n-      <ThemeContext.Provider value={{ theme, setTheme }}>\r\n-        {children}\r\n-      </ThemeContext.Provider>\r\n-    );\r\n   };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1630108504753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import { getInitialTheme, ThemeContext } from \"../contexts/themeContext\";\r\n \r\n \r\n \r\n-export const ThemeProvider = ({ initialTheme: string, children }) => {\r\n+export const ThemeProvider = ({ initialTheme, children }) => {\r\n     const [theme, setTheme] = useState(getInitialTheme);\r\n   \r\n     const checkTheme = (existing) => {\r\n       const root = window.document.documentElement;\r\n"
                },
                {
                    "date": 1630108625387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import { getInitialTheme, ThemeContext } from \"../contexts/themeContext\";\r\n \r\n \r\n \r\n-export const ThemeProvider = ({ initialTheme, children }) => {\r\n+export const ThemeProvider = ({ initialTheme:, children }) => {\r\n     const [theme, setTheme] = useState(getInitialTheme);\r\n   \r\n     const checkTheme = (existing) => {\r\n       const root = window.document.documentElement;\r\n"
                },
                {
                    "date": 1630108650222,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,32 @@\n+import { useEffect, useState } from \"react\";\r\n+import { getInitialTheme, ThemeContext } from \"../contexts/themeContext\";\r\n+\r\n+\r\n+\r\n+export const ThemeProvider = ({ initialTheme: ,, children }) => {\r\n+    const [theme, setTheme] = useState(getInitialTheme);\r\n+  \r\n+    const checkTheme = (existing) => {\r\n+      const root = window.document.documentElement;\r\n+      const isDark = existing === 'dark';\r\n+  \r\n+      root.classList.remove(isDark ? 'light' : 'dark');\r\n+      root.classList.add(existing);\r\n+  \r\n+      localStorage.setItem('current-theme', existing);\r\n+    };\r\n+  \r\n+    if (initialTheme) {\r\n+      checkTheme(initialTheme);\r\n+    }\r\n+  \r\n+    useEffect(() => {\r\n+      checkTheme(theme);\r\n+    }, [theme]);\r\n+  \r\n+    return (\r\n+      <ThemeContext.Provider value={{ theme, setTheme }}>\r\n+        {children}\r\n+      </ThemeContext.Provider>\r\n+    );\r\n+  };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1630108657757,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import { getInitialTheme, ThemeContext } from \"../contexts/themeContext\";\r\n \r\n \r\n \r\n-export const ThemeProvider = ({ initialTheme: ,, children }) => {\r\n+export const ThemeProvider = ({ initialTheme: <any>, children }) => {\r\n     const [theme, setTheme] = useState(getInitialTheme);\r\n   \r\n     const checkTheme = (existing) => {\r\n       const root = window.document.documentElement;\r\n@@ -28,37 +28,5 @@\n       <ThemeContext.Provider value={{ theme, setTheme }}>\r\n         {children}\r\n       </ThemeContext.Provider>\r\n     );\r\n-  };\n-import { useEffect, useState } from \"react\";\r\n-import { getInitialTheme, ThemeContext } from \"../contexts/themeContext\";\r\n-\r\n-\r\n-\r\n-export const ThemeProvider = ({ initialTheme:, children }) => {\r\n-    const [theme, setTheme] = useState(getInitialTheme);\r\n-  \r\n-    const checkTheme = (existing) => {\r\n-      const root = window.document.documentElement;\r\n-      const isDark = existing === 'dark';\r\n-  \r\n-      root.classList.remove(isDark ? 'light' : 'dark');\r\n-      root.classList.add(existing);\r\n-  \r\n-      localStorage.setItem('current-theme', existing);\r\n-    };\r\n-  \r\n-    if (initialTheme) {\r\n-      checkTheme(initialTheme);\r\n-    }\r\n-  \r\n-    useEffect(() => {\r\n-      checkTheme(theme);\r\n-    }, [theme]);\r\n-  \r\n-    return (\r\n-      <ThemeContext.Provider value={{ theme, setTheme }}>\r\n-        {children}\r\n-      </ThemeContext.Provider>\r\n-    );\r\n   };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1630108668371,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import { getInitialTheme, ThemeContext } from \"../contexts/themeContext\";\r\n \r\n \r\n \r\n-export const ThemeProvider = ({ initialTheme: <any>, children }) => {\r\n+export const ThemeProvider = ({ initialTheme, children }) => {\r\n     const [theme, setTheme] = useState(getInitialTheme);\r\n   \r\n     const checkTheme = (existing) => {\r\n       const root = window.document.documentElement;\r\n"
                }
            ],
            "date": 1630104071822,
            "name": "Commit-0",
            "content": "export const ThemeProvider = ({ initialTheme, children }) => {\r\n    const [theme, setTheme] = React.useState(getInitialTheme);\r\n  \r\n    const checkTheme = (existing) => {\r\n      const root = window.document.documentElement;\r\n      const isDark = existing === 'dark';\r\n  \r\n      root.classList.remove(isDark ? 'light' : 'dark');\r\n      root.classList.add(existing);\r\n  \r\n      localStorage.setItem('current-theme', existing);\r\n    };\r\n  \r\n    if (initialTheme) {\r\n      checkTheme(initialTheme);\r\n    }\r\n  \r\n    React.useEffect(() => {\r\n      checkTheme(theme);\r\n    }, [theme]);\r\n  \r\n    return (\r\n      <ThemeContext.Provider value={{ theme, setTheme }}>\r\n        {children}\r\n      </ThemeContext.Provider>\r\n    );\r\n  };"
        }
    ]
}