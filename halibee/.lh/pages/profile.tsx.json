{
    "sourceFile": "pages/profile.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 38,
            "patches": [
                {
                    "date": 1630172913711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1630172925550,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import { useAuth } from '../context/AuthUserContext';\r\n \r\n import {Container, Row, Col} from 'reactstrap';\r\n \r\n-const LoggedIn = () => {\r\n+export const LoggedIn = () => {\r\n   const { authUser, loading } = useAuth();\r\n   const router = useRouter();\r\n \r\n   // Listen for changes on loading and authUser, redirect if needed\r\n"
                },
                {
                    "date": 1630172931726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n import { useEffect } from 'react';\r\n import { useRouter } from 'next/router';\r\n import { useAuth } from '../context/AuthUserContext';\r\n \r\n-import {Container, Row, Col} from 'reactstrap';\r\n \r\n export const LoggedIn = () => {\r\n   const { authUser, loading } = useAuth();\r\n   const router = useRouter();\r\n"
                },
                {
                    "date": 1630172937215,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n import { useEffect } from 'react';\r\n import { useRouter } from 'next/router';\r\n-import { useAuth } from '../context/AuthUserContext';\r\n \r\n \r\n export const LoggedIn = () => {\r\n   const { authUser, loading } = useAuth();\r\n"
                },
                {
                    "date": 1630172968308,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,7 +12,7 @@\n       router.push('/')\r\n   }, [authUser, loading])\r\n \r\n   return (\r\n-    //Your logged in page\r\n+    <//Your logged in page>\r\n   )\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1630172974439,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,18 @@\n+import { useEffect } from 'react';\r\n+import { useRouter } from 'next/router';\r\n+\r\n+\r\n+export const LoggedIn = () => {\r\n+  const { authUser, loading } = useAuth();\r\n+  const router = useRouter();\r\n+\r\n+  // Listen for changes on loading and authUser, redirect if needed\r\n+  useEffect(() => {\r\n+    if (!loading && !authUser)\r\n+      router.push('/')\r\n+  }, [authUser, loading])\r\n+\r\n+  return (\r\n+    <div></\r\n+  )\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1630172980403,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,20 @@\n+import { useEffect } from 'react';\r\n+import { useRouter } from 'next/router';\r\n+\r\n+\r\n+export const LoggedIn = () => {\r\n+  const { authUser, loading } = useAuth();\r\n+  const router = useRouter();\r\n+\r\n+  // Listen for changes on loading and authUser, redirect if needed\r\n+  useEffect(() => {\r\n+    if (!loading && !authUser)\r\n+      router.push('/')\r\n+  }, [authUser, loading])\r\n+\r\n+  return (\r\n+    <div>\r\n+        \r\n+    </div>\r\n+  )\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1630172986454,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,20 @@\n+import { useEffect } from 'react';\r\n+import { useRouter } from 'next/router';\r\n+\r\n+\r\n+export const LoggedIn = () => {\r\n+  const { authUser, loading } = useAuth();\r\n+  const router = useRouter();\r\n+\r\n+  // Listen for changes on loading and authUser, redirect if needed\r\n+  useEffect(() => {\r\n+    if (!loading && !authUser)\r\n+      router.push('/')\r\n+  }, [authUser, loading])\r\n+\r\n+  return (\r\n+    <div>\r\n+        Logged In\r\n+    </div>\r\n+  )\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1630172998654,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,20 @@\n+import { useEffect } from 'react';\r\n+import { useRouter } from 'next/router';\r\n+\r\n+\r\n+export const LoggedIn = () => {\r\n+  const { authUser, loading } = useAuth();\r\n+  const router = useRouter();\r\n+\r\n+  // Listen for changes on loading and authUser, redirect if needed\r\n+  useEffect(() => {\r\n+    if (!loading && !authUser)\r\n+      router.push('/authentication')\r\n+  }, [authUser, loading])\r\n+\r\n+  return (\r\n+    <div>\r\n+        Logged In\r\n+    </div>\r\n+  )\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1630173003992,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,21 @@\n+import { useEffect } from 'react';\r\n+import { useRouter } from 'next/router';\r\n+import { useAuth } from '../modules/contexts/authContext';\r\n+\r\n+\r\n+export const LoggedIn = () => {\r\n+  const { authUser, loading } = useAuth();\r\n+  const router = useRouter();\r\n+\r\n+  // Listen for changes on loading and authUser, redirect if needed\r\n+  useEffect(() => {\r\n+    if (!loading && !authUser)\r\n+      router.push('/authentication')\r\n+  }, [authUser, loading])\r\n+\r\n+  return (\r\n+    <div>\r\n+        Logged In\r\n+    </div>\r\n+  )\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1630173017493,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,21 @@\n+import { useEffect } from 'react';\r\n+import { useRouter } from 'next/router';\r\n+import { useAuth } from '../modules/contexts/authContext';\r\n+\r\n+\r\n+export const Profile = () => {\r\n+  const { authUser, loading } = useAuth();\r\n+  const router = useRouter();\r\n+\r\n+  // Listen for changes on loading and authUser, redirect if needed\r\n+  useEffect(() => {\r\n+    if (!loading && !authUser)\r\n+      router.push('/authentication')\r\n+  }, [authUser, loading])\r\n+\r\n+  return (\r\n+    <div>\r\n+        Logged In\r\n+    </div>\r\n+  )\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1630173209791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,7 @@\n+export default function() {\r\n+    return (\r\n+        <div>\r\n+            Enter\r\n+        </div>\r\n+    );\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1630173216822,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,7 @@\n+export default function Profile() {\r\n+    return (\r\n+        <div>\r\n+            Enter\r\n+        </div>\r\n+    );\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1630173223387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,16 @@\n+export default function Profile() {\r\n+    const { authUser, loading } = useAuth();\r\n+  const router = useRouter();\r\n+\r\n+  // Listen for changes on loading and authUser, redirect if needed\r\n+  useEffect(() => {\r\n+    if (!loading && !authUser)\r\n+      router.push('/authentication')\r\n+  }, [authUser, loading])\r\n+\r\n+  return (\r\n+    <div>\r\n+        Logged In\r\n+    </div>\r\n+  )\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1630173228943,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,18 @@\n+import { useEffect } from \"react\";\r\n+\r\n+export default function Profile() {\r\n+    const { authUser, loading } = useAuth();\r\n+  const router = useRouter();\r\n+\r\n+  // Listen for changes on loading and authUser, redirect if needed\r\n+  useEffect(() => {\r\n+    if (!loading && !authUser)\r\n+      router.push('/authentication')\r\n+  }, [authUser, loading])\r\n+\r\n+  return (\r\n+    <div>\r\n+        Logged In\r\n+    </div>\r\n+  )\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1630173234959,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,19 @@\n+import { useRouter } from \"next/dist/client/router\";\r\n+import { useEffect } from \"react\";\r\n+\r\n+export default function Profile() {\r\n+    const { authUser, loading } = useAuth();\r\n+  const router = useRouter();\r\n+\r\n+  // Listen for changes on loading and authUser, redirect if needed\r\n+  useEffect(() => {\r\n+    if (!loading && !authUser)\r\n+      router.push('/authentication')\r\n+  }, [authUser, loading])\r\n+\r\n+  return (\r\n+    <div>\r\n+        Logged In\r\n+    </div>\r\n+  )\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1630173417749,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,20 @@\n+import { useRouter } from \"next/dist/client/router\";\r\n+import { useEffect } from \"react\";\r\n+import { useAuth } from \"../modules/contexts/authContext\";\r\n+\r\n+export default function Profile() {\r\n+    const { authUser, loading } = useAuth();\r\n+  const router = useRouter();\r\n+\r\n+  // Listen for changes on loading and authUser, redirect if needed\r\n+  useEffect(() => {\r\n+    if (!loading | !authUser)\r\n+      router.push('/authentication')\r\n+  }, [authUser, loading])\r\n+\r\n+  return (\r\n+    <div>\r\n+        Logged In\r\n+    </div>\r\n+  )\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1630173437600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,20 @@\n+import { useRouter } from \"next/dist/client/router\";\r\n+import { useEffect } from \"react\";\r\n+import { useAuth } from \"../modules/contexts/authContext\";\r\n+\r\n+export default function Profile() {\r\n+    const { authUser, loading } = useAuth();\r\n+  const router = useRouter();\r\n+\r\n+  // Listen for changes on loading and authUser, redirect if needed\r\n+  useEffect(() => {\r\n+    if (!loading && !authUser)\r\n+      router.push('/authentication')\r\n+  }, [authUser, loading])\r\n+\r\n+  return (\r\n+    <div>\r\n+        Logged In\r\n+    </div>\r\n+  )\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1630173445970,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,20 @@\n+import { useRouter } from \"next/dist/client/router\";\r\n+import { useEffect } from \"react\";\r\n+import { useAuth } from \"../modules/contexts/authContext\";\r\n+\r\n+export default function Profile() {\r\n+    const { authUser, loading } = useAuth();\r\n+  const router = useRouter();\r\n+\r\n+  // Listen for changes on loading and authUser, redirect if needed\r\n+  useEffect(() => {\r\n+    if (loading && !authUser)\r\n+      router.push('/authentication')\r\n+  }, [authUser, loading])\r\n+\r\n+  return (\r\n+    <div>\r\n+        Logged In\r\n+    </div>\r\n+  )\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1630173472474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,20 @@\n+import { useRouter } from \"next/dist/client/router\";\r\n+import { useEffect } from \"react\";\r\n+import { useAuth } from \"../modules/contexts/authContext\";\r\n+\r\n+export default function Profile() {\r\n+    const { authUser, loading } = useAuth();\r\n+  const router = useRouter();\r\n+\r\n+  // Listen for changes on loading and authUser, redirect if needed\r\n+  useEffect(() => {\r\n+    if (!loading || !authUser)\r\n+      router.push('/authentication')\r\n+  }, [authUser, loading])\r\n+\r\n+  return (\r\n+    <div>\r\n+        Logged In\r\n+    </div>\r\n+  )\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1630180282840,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,179 @@\n+import { useState, useEffect, FormEvent } from \"react\";\r\n+import SyntaxHighlighter from \"react-syntax-highlighter\";\r\n+import { atomOneDark as style } from \"react-syntax-highlighter/dist/cjs/styles/hljs\";\r\n+import { firebase } from \"src/initFirebase\";\r\n+import FirebaseAuth from \"src/firebaseAuth\";\r\n+import { useAuth } from \"src/authProvider\";\r\n+\r\n+const db = firebase.database();\r\n+\r\n+export default function Home() {\r\n+  const { user, loading, logout } = useAuth();\r\n+\r\n+  if (loading) return null;\r\n+  if (!user) return <FirebaseAuth />;\r\n+\r\n+  return (\r\n+    <main>\r\n+      <button type=\"button\" onClick={logout} className=\"link\">\r\n+        Logout\r\n+      </button>\r\n+      <AddGist uid={user.uid} />\r\n+      <Gists uid={user.uid} />\r\n+    </main>\r\n+  );\r\n+}\r\n+\r\n+interface IGist {\r\n+  uid: string;\r\n+  file: string;\r\n+  code: string;\r\n+}\r\n+\r\n+const langs: Record<string, string> = {\r\n+  js: \"javascript\",\r\n+  rb: \"ruby\",\r\n+};\r\n+\r\n+function getLanguage(file: string): string {\r\n+  const parts = file.split(\".\");\r\n+  const ext = parts[parts.length - 1];\r\n+  return langs[ext] || \"text\";\r\n+}\r\n+\r\n+function Gists({ uid }: { uid: string }) {\r\n+  const [gists, setGists] = useState<Record<string, IGist>>({});\r\n+  const [editing, setEditing] = useState(\"\");\r\n+\r\n+  useEffect(() => {\r\n+    const userGistsRef = db.ref(`userGists/${uid}`);\r\n+    const refs = [userGistsRef];\r\n+\r\n+    userGistsRef.on(\"child_added\", (child) => {\r\n+      const key: string = child.key as string;\r\n+      const gistRef = db.ref(`gists/${key}`);\r\n+      refs.push(gistRef);\r\n+      gistRef.on(\"value\", (snap) => {\r\n+        setGists((old) => {\r\n+          return { ...old, [key]: snap.val() };\r\n+        });\r\n+      });\r\n+    });\r\n+\r\n+    return () => {\r\n+      refs.forEach((ref) => ref.off());\r\n+    };\r\n+  }, []);\r\n+\r\n+  return (\r\n+    <ul>\r\n+      {Object.entries(gists).map(([id, gist]) => (\r\n+        <li key={id}>\r\n+          {id === editing ? (\r\n+            <EditGist id={id} gist={gist} close={() => setEditing(\"\")} />\r\n+          ) : (\r\n+            <>\r\n+              <h3>{gist.file}</h3>\r\n+\r\n+              <SyntaxHighlighter\r\n+                style={style}\r\n+                language={getLanguage(gist.file)}\r\n+              >\r\n+                {gist.code}\r\n+              </SyntaxHighlighter>\r\n+\r\n+              <button type=\"button\" onClick={() => setEditing(id)}>\r\n+                Edit\r\n+              </button>\r\n+            </>\r\n+          )}\r\n+        </li>\r\n+      ))}\r\n+    </ul>\r\n+  );\r\n+}\r\n+\r\n+function AddGist({ uid }: { uid: string }) {\r\n+  const [file, setFile] = useState(\"\");\r\n+  const [code, setCode] = useState(\"\");\r\n+\r\n+  const onSubmit = async (e: FormEvent<HTMLFormElement>) => {\r\n+    e.preventDefault();\r\n+\r\n+    const gistRef = db.ref(\"gists\").push();\r\n+    await db.ref(`userGists/${uid}/${gistRef.key}`).set(true);\r\n+    await gistRef.set({\r\n+      uid,\r\n+      file,\r\n+      code,\r\n+    });\r\n+\r\n+    setFile(\"\");\r\n+    setCode(\"\");\r\n+  };\r\n+\r\n+  return (\r\n+    <form onSubmit={onSubmit}>\r\n+      <h2>Add Gist</h2>\r\n+\r\n+      <input\r\n+        required\r\n+        type=\"text\"\r\n+        value={file}\r\n+        onChange={(e) => setFile(e.target.value)}\r\n+        placeholder=\"file.js\"\r\n+      />\r\n+\r\n+      <textarea\r\n+        required\r\n+        value={code}\r\n+        onChange={(e) => setCode(e.target.value)}\r\n+      />\r\n+\r\n+      <button type=\"submit\">Save</button>\r\n+    </form>\r\n+  );\r\n+}\r\n+\r\n+function EditGist({\r\n+  id,\r\n+  gist,\r\n+  close,\r\n+}: {\r\n+  id: string;\r\n+  gist: IGist;\r\n+  close: () => void;\r\n+}) {\r\n+  const [file, setFile] = useState(gist.file);\r\n+  const [code, setCode] = useState(gist.code);\r\n+\r\n+  const onSubmit = async (e: FormEvent<HTMLFormElement>) => {\r\n+    e.preventDefault();\r\n+\r\n+    const gistRef = db.ref(`gists/${id}`);\r\n+    gistRef.child(\"file\").set(file);\r\n+    gistRef.child(\"code\").set(code);\r\n+\r\n+    close();\r\n+  };\r\n+\r\n+  return (\r\n+    <form onSubmit={onSubmit}>\r\n+      <input\r\n+        required\r\n+        type=\"text\"\r\n+        value={file}\r\n+        onChange={(e) => setFile(e.target.value)}\r\n+        placeholder=\"file.js\"\r\n+      />\r\n+\r\n+      <textarea\r\n+        required\r\n+        value={code}\r\n+        onChange={(e) => setCode(e.target.value)}\r\n+      />\r\n+\r\n+      <button type=\"submit\">Save</button>\r\n+    </form>\r\n+  );\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1630180306769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,174 @@\n+import { useState, useEffect, FormEvent } from \"react\";\r\n+\r\n+const db = firebase.database();\r\n+\r\n+export default function Home() {\r\n+  const { user, loading, logout } = useAuth();\r\n+\r\n+  if (loading) return null;\r\n+  if (!user) return <FirebaseAuth />;\r\n+\r\n+  return (\r\n+    <main>\r\n+      <button type=\"button\" onClick={logout} className=\"link\">\r\n+        Logout\r\n+      </button>\r\n+      <AddGist uid={user.uid} />\r\n+      <Gists uid={user.uid} />\r\n+    </main>\r\n+  );\r\n+}\r\n+\r\n+interface IGist {\r\n+  uid: string;\r\n+  file: string;\r\n+  code: string;\r\n+}\r\n+\r\n+const langs: Record<string, string> = {\r\n+  js: \"javascript\",\r\n+  rb: \"ruby\",\r\n+};\r\n+\r\n+function getLanguage(file: string): string {\r\n+  const parts = file.split(\".\");\r\n+  const ext = parts[parts.length - 1];\r\n+  return langs[ext] || \"text\";\r\n+}\r\n+\r\n+function Gists({ uid }: { uid: string }) {\r\n+  const [gists, setGists] = useState<Record<string, IGist>>({});\r\n+  const [editing, setEditing] = useState(\"\");\r\n+\r\n+  useEffect(() => {\r\n+    const userGistsRef = db.ref(`userGists/${uid}`);\r\n+    const refs = [userGistsRef];\r\n+\r\n+    userGistsRef.on(\"child_added\", (child) => {\r\n+      const key: string = child.key as string;\r\n+      const gistRef = db.ref(`gists/${key}`);\r\n+      refs.push(gistRef);\r\n+      gistRef.on(\"value\", (snap) => {\r\n+        setGists((old) => {\r\n+          return { ...old, [key]: snap.val() };\r\n+        });\r\n+      });\r\n+    });\r\n+\r\n+    return () => {\r\n+      refs.forEach((ref) => ref.off());\r\n+    };\r\n+  }, []);\r\n+\r\n+  return (\r\n+    <ul>\r\n+      {Object.entries(gists).map(([id, gist]) => (\r\n+        <li key={id}>\r\n+          {id === editing ? (\r\n+            <EditGist id={id} gist={gist} close={() => setEditing(\"\")} />\r\n+          ) : (\r\n+            <>\r\n+              <h3>{gist.file}</h3>\r\n+\r\n+              <SyntaxHighlighter\r\n+                style={style}\r\n+                language={getLanguage(gist.file)}\r\n+              >\r\n+                {gist.code}\r\n+              </SyntaxHighlighter>\r\n+\r\n+              <button type=\"button\" onClick={() => setEditing(id)}>\r\n+                Edit\r\n+              </button>\r\n+            </>\r\n+          )}\r\n+        </li>\r\n+      ))}\r\n+    </ul>\r\n+  );\r\n+}\r\n+\r\n+function AddGist({ uid }: { uid: string }) {\r\n+  const [file, setFile] = useState(\"\");\r\n+  const [code, setCode] = useState(\"\");\r\n+\r\n+  const onSubmit = async (e: FormEvent<HTMLFormElement>) => {\r\n+    e.preventDefault();\r\n+\r\n+    const gistRef = db.ref(\"gists\").push();\r\n+    await db.ref(`userGists/${uid}/${gistRef.key}`).set(true);\r\n+    await gistRef.set({\r\n+      uid,\r\n+      file,\r\n+      code,\r\n+    });\r\n+\r\n+    setFile(\"\");\r\n+    setCode(\"\");\r\n+  };\r\n+\r\n+  return (\r\n+    <form onSubmit={onSubmit}>\r\n+      <h2>Add Gist</h2>\r\n+\r\n+      <input\r\n+        required\r\n+        type=\"text\"\r\n+        value={file}\r\n+        onChange={(e) => setFile(e.target.value)}\r\n+        placeholder=\"file.js\"\r\n+      />\r\n+\r\n+      <textarea\r\n+        required\r\n+        value={code}\r\n+        onChange={(e) => setCode(e.target.value)}\r\n+      />\r\n+\r\n+      <button type=\"submit\">Save</button>\r\n+    </form>\r\n+  );\r\n+}\r\n+\r\n+function EditGist({\r\n+  id,\r\n+  gist,\r\n+  close,\r\n+}: {\r\n+  id: string;\r\n+  gist: IGist;\r\n+  close: () => void;\r\n+}) {\r\n+  const [file, setFile] = useState(gist.file);\r\n+  const [code, setCode] = useState(gist.code);\r\n+\r\n+  const onSubmit = async (e: FormEvent<HTMLFormElement>) => {\r\n+    e.preventDefault();\r\n+\r\n+    const gistRef = db.ref(`gists/${id}`);\r\n+    gistRef.child(\"file\").set(file);\r\n+    gistRef.child(\"code\").set(code);\r\n+\r\n+    close();\r\n+  };\r\n+\r\n+  return (\r\n+    <form onSubmit={onSubmit}>\r\n+      <input\r\n+        required\r\n+        type=\"text\"\r\n+        value={file}\r\n+        onChange={(e) => setFile(e.target.value)}\r\n+        placeholder=\"file.js\"\r\n+      />\r\n+\r\n+      <textarea\r\n+        required\r\n+        value={code}\r\n+        onChange={(e) => setCode(e.target.value)}\r\n+      />\r\n+\r\n+      <button type=\"submit\">Save</button>\r\n+    </form>\r\n+  );\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1630180327997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,174 @@\n+import { useState, useEffect, FormEvent } from \"react\";\r\n+\r\n+const db = da;\r\n+\r\n+export default function Home() {\r\n+  const { user, loading, logout } = useAuth();\r\n+\r\n+  if (loading) return null;\r\n+  if (!user) return <FirebaseAuth />;\r\n+\r\n+  return (\r\n+    <main>\r\n+      <button type=\"button\" onClick={logout} className=\"link\">\r\n+        Logout\r\n+      </button>\r\n+      <AddGist uid={user.uid} />\r\n+      <Gists uid={user.uid} />\r\n+    </main>\r\n+  );\r\n+}\r\n+\r\n+interface IGist {\r\n+  uid: string;\r\n+  file: string;\r\n+  code: string;\r\n+}\r\n+\r\n+const langs: Record<string, string> = {\r\n+  js: \"javascript\",\r\n+  rb: \"ruby\",\r\n+};\r\n+\r\n+function getLanguage(file: string): string {\r\n+  const parts = file.split(\".\");\r\n+  const ext = parts[parts.length - 1];\r\n+  return langs[ext] || \"text\";\r\n+}\r\n+\r\n+function Gists({ uid }: { uid: string }) {\r\n+  const [gists, setGists] = useState<Record<string, IGist>>({});\r\n+  const [editing, setEditing] = useState(\"\");\r\n+\r\n+  useEffect(() => {\r\n+    const userGistsRef = db.ref(`userGists/${uid}`);\r\n+    const refs = [userGistsRef];\r\n+\r\n+    userGistsRef.on(\"child_added\", (child) => {\r\n+      const key: string = child.key as string;\r\n+      const gistRef = db.ref(`gists/${key}`);\r\n+      refs.push(gistRef);\r\n+      gistRef.on(\"value\", (snap) => {\r\n+        setGists((old) => {\r\n+          return { ...old, [key]: snap.val() };\r\n+        });\r\n+      });\r\n+    });\r\n+\r\n+    return () => {\r\n+      refs.forEach((ref) => ref.off());\r\n+    };\r\n+  }, []);\r\n+\r\n+  return (\r\n+    <ul>\r\n+      {Object.entries(gists).map(([id, gist]) => (\r\n+        <li key={id}>\r\n+          {id === editing ? (\r\n+            <EditGist id={id} gist={gist} close={() => setEditing(\"\")} />\r\n+          ) : (\r\n+            <>\r\n+              <h3>{gist.file}</h3>\r\n+\r\n+              <SyntaxHighlighter\r\n+                style={style}\r\n+                language={getLanguage(gist.file)}\r\n+              >\r\n+                {gist.code}\r\n+              </SyntaxHighlighter>\r\n+\r\n+              <button type=\"button\" onClick={() => setEditing(id)}>\r\n+                Edit\r\n+              </button>\r\n+            </>\r\n+          )}\r\n+        </li>\r\n+      ))}\r\n+    </ul>\r\n+  );\r\n+}\r\n+\r\n+function AddGist({ uid }: { uid: string }) {\r\n+  const [file, setFile] = useState(\"\");\r\n+  const [code, setCode] = useState(\"\");\r\n+\r\n+  const onSubmit = async (e: FormEvent<HTMLFormElement>) => {\r\n+    e.preventDefault();\r\n+\r\n+    const gistRef = db.ref(\"gists\").push();\r\n+    await db.ref(`userGists/${uid}/${gistRef.key}`).set(true);\r\n+    await gistRef.set({\r\n+      uid,\r\n+      file,\r\n+      code,\r\n+    });\r\n+\r\n+    setFile(\"\");\r\n+    setCode(\"\");\r\n+  };\r\n+\r\n+  return (\r\n+    <form onSubmit={onSubmit}>\r\n+      <h2>Add Gist</h2>\r\n+\r\n+      <input\r\n+        required\r\n+        type=\"text\"\r\n+        value={file}\r\n+        onChange={(e) => setFile(e.target.value)}\r\n+        placeholder=\"file.js\"\r\n+      />\r\n+\r\n+      <textarea\r\n+        required\r\n+        value={code}\r\n+        onChange={(e) => setCode(e.target.value)}\r\n+      />\r\n+\r\n+      <button type=\"submit\">Save</button>\r\n+    </form>\r\n+  );\r\n+}\r\n+\r\n+function EditGist({\r\n+  id,\r\n+  gist,\r\n+  close,\r\n+}: {\r\n+  id: string;\r\n+  gist: IGist;\r\n+  close: () => void;\r\n+}) {\r\n+  const [file, setFile] = useState(gist.file);\r\n+  const [code, setCode] = useState(gist.code);\r\n+\r\n+  const onSubmit = async (e: FormEvent<HTMLFormElement>) => {\r\n+    e.preventDefault();\r\n+\r\n+    const gistRef = db.ref(`gists/${id}`);\r\n+    gistRef.child(\"file\").set(file);\r\n+    gistRef.child(\"code\").set(code);\r\n+\r\n+    close();\r\n+  };\r\n+\r\n+  return (\r\n+    <form onSubmit={onSubmit}>\r\n+      <input\r\n+        required\r\n+        type=\"text\"\r\n+        value={file}\r\n+        onChange={(e) => setFile(e.target.value)}\r\n+        placeholder=\"file.js\"\r\n+      />\r\n+\r\n+      <textarea\r\n+        required\r\n+        value={code}\r\n+        onChange={(e) => setCode(e.target.value)}\r\n+      />\r\n+\r\n+      <button type=\"submit\">Save</button>\r\n+    </form>\r\n+  );\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1630180348469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,175 @@\n+import { useState, useEffect, FormEvent } from \"react\";\r\n+import { database } from \"../modules/firebase/initialiseFirebase\";\r\n+\r\n+const database = database;\r\n+\r\n+export default function Home() {\r\n+  const { user, loading, logout } = useAuth();\r\n+\r\n+  if (loading) return null;\r\n+  if (!user) return <FirebaseAuth />;\r\n+\r\n+  return (\r\n+    <main>\r\n+      <button type=\"button\" onClick={logout} className=\"link\">\r\n+        Logout\r\n+      </button>\r\n+      <AddGist uid={user.uid} />\r\n+      <Gists uid={user.uid} />\r\n+    </main>\r\n+  );\r\n+}\r\n+\r\n+interface IGist {\r\n+  uid: string;\r\n+  file: string;\r\n+  code: string;\r\n+}\r\n+\r\n+const langs: Record<string, string> = {\r\n+  js: \"javascript\",\r\n+  rb: \"ruby\",\r\n+};\r\n+\r\n+function getLanguage(file: string): string {\r\n+  const parts = file.split(\".\");\r\n+  const ext = parts[parts.length - 1];\r\n+  return langs[ext] || \"text\";\r\n+}\r\n+\r\n+function Gists({ uid }: { uid: string }) {\r\n+  const [gists, setGists] = useState<Record<string, IGist>>({});\r\n+  const [editing, setEditing] = useState(\"\");\r\n+\r\n+  useEffect(() => {\r\n+    const userGistsRef = database.ref(`userGists/${uid}`);\r\n+    const refs = [userGistsRef];\r\n+\r\n+    userGistsRef.on(\"child_added\", (child) => {\r\n+      const key: string = child.key as string;\r\n+      const gistRef = database.ref(`gists/${key}`);\r\n+      refs.push(gistRef);\r\n+      gistRef.on(\"value\", (snap) => {\r\n+        setGists((old) => {\r\n+          return { ...old, [key]: snap.val() };\r\n+        });\r\n+      });\r\n+    });\r\n+\r\n+    return () => {\r\n+      refs.forEach((ref) => ref.off());\r\n+    };\r\n+  }, []);\r\n+\r\n+  return (\r\n+    <ul>\r\n+      {Object.entries(gists).map(([id, gist]) => (\r\n+        <li key={id}>\r\n+          {id === editing ? (\r\n+            <EditGist id={id} gist={gist} close={() => setEditing(\"\")} />\r\n+          ) : (\r\n+            <>\r\n+              <h3>{gist.file}</h3>\r\n+\r\n+              <SyntaxHighlighter\r\n+                style={style}\r\n+                language={getLanguage(gist.file)}\r\n+              >\r\n+                {gist.code}\r\n+              </SyntaxHighlighter>\r\n+\r\n+              <button type=\"button\" onClick={() => setEditing(id)}>\r\n+                Edit\r\n+              </button>\r\n+            </>\r\n+          )}\r\n+        </li>\r\n+      ))}\r\n+    </ul>\r\n+  );\r\n+}\r\n+\r\n+function AddGist({ uid }: { uid: string }) {\r\n+  const [file, setFile] = useState(\"\");\r\n+  const [code, setCode] = useState(\"\");\r\n+\r\n+  const onSubmit = async (e: FormEvent<HTMLFormElement>) => {\r\n+    e.preventDefault();\r\n+\r\n+    const gistRef = database.ref(\"gists\").push();\r\n+    await database.ref(`userGists/${uid}/${gistRef.key}`).set(true);\r\n+    await gistRef.set({\r\n+      uid,\r\n+      file,\r\n+      code,\r\n+    });\r\n+\r\n+    setFile(\"\");\r\n+    setCode(\"\");\r\n+  };\r\n+\r\n+  return (\r\n+    <form onSubmit={onSubmit}>\r\n+      <h2>Add Gist</h2>\r\n+\r\n+      <input\r\n+        required\r\n+        type=\"text\"\r\n+        value={file}\r\n+        onChange={(e) => setFile(e.target.value)}\r\n+        placeholder=\"file.js\"\r\n+      />\r\n+\r\n+      <textarea\r\n+        required\r\n+        value={code}\r\n+        onChange={(e) => setCode(e.target.value)}\r\n+      />\r\n+\r\n+      <button type=\"submit\">Save</button>\r\n+    </form>\r\n+  );\r\n+}\r\n+\r\n+function EditGist({\r\n+  id,\r\n+  gist,\r\n+  close,\r\n+}: {\r\n+  id: string;\r\n+  gist: IGist;\r\n+  close: () => void;\r\n+}) {\r\n+  const [file, setFile] = useState(gist.file);\r\n+  const [code, setCode] = useState(gist.code);\r\n+\r\n+  const onSubmit = async (e: FormEvent<HTMLFormElement>) => {\r\n+    e.preventDefault();\r\n+\r\n+    const gistRef = database.ref(`gists/${id}`);\r\n+    gistRef.child(\"file\").set(file);\r\n+    gistRef.child(\"code\").set(code);\r\n+\r\n+    close();\r\n+  };\r\n+\r\n+  return (\r\n+    <form onSubmit={onSubmit}>\r\n+      <input\r\n+        required\r\n+        type=\"text\"\r\n+        value={file}\r\n+        onChange={(e) => setFile(e.target.value)}\r\n+        placeholder=\"file.js\"\r\n+      />\r\n+\r\n+      <textarea\r\n+        required\r\n+        value={code}\r\n+        onChange={(e) => setCode(e.target.value)}\r\n+      />\r\n+\r\n+      <button type=\"submit\">Save</button>\r\n+    </form>\r\n+  );\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1630180354760,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,175 @@\n+import { useState, useEffect, FormEvent } from \"react\";\r\n+import { database } from \"../modules/firebase/initialiseFirebase\";\r\n+\r\n+\r\n+\r\n+export default function Home() {\r\n+  const { user, loading, logout } = useAuth();\r\n+\r\n+  if (loading) return null;\r\n+  if (!user) return <FirebaseAuth />;\r\n+\r\n+  return (\r\n+    <main>\r\n+      <button type=\"button\" onClick={logout} className=\"link\">\r\n+        Logout\r\n+      </button>\r\n+      <AddGist uid={user.uid} />\r\n+      <Gists uid={user.uid} />\r\n+    </main>\r\n+  );\r\n+}\r\n+\r\n+interface IGist {\r\n+  uid: string;\r\n+  file: string;\r\n+  code: string;\r\n+}\r\n+\r\n+const langs: Record<string, string> = {\r\n+  js: \"javascript\",\r\n+  rb: \"ruby\",\r\n+};\r\n+\r\n+function getLanguage(file: string): string {\r\n+  const parts = file.split(\".\");\r\n+  const ext = parts[parts.length - 1];\r\n+  return langs[ext] || \"text\";\r\n+}\r\n+\r\n+function Gists({ uid }: { uid: string }) {\r\n+  const [gists, setGists] = useState<Record<string, IGist>>({});\r\n+  const [editing, setEditing] = useState(\"\");\r\n+\r\n+  useEffect(() => {\r\n+    const userGistsRef = database.ref(`userGists/${uid}`);\r\n+    const refs = [userGistsRef];\r\n+\r\n+    userGistsRef.on(\"child_added\", (child) => {\r\n+      const key: string = child.key as string;\r\n+      const gistRef = database.ref(`gists/${key}`);\r\n+      refs.push(gistRef);\r\n+      gistRef.on(\"value\", (snap) => {\r\n+        setGists((old) => {\r\n+          return { ...old, [key]: snap.val() };\r\n+        });\r\n+      });\r\n+    });\r\n+\r\n+    return () => {\r\n+      refs.forEach((ref) => ref.off());\r\n+    };\r\n+  }, []);\r\n+\r\n+  return (\r\n+    <ul>\r\n+      {Object.entries(gists).map(([id, gist]) => (\r\n+        <li key={id}>\r\n+          {id === editing ? (\r\n+            <EditGist id={id} gist={gist} close={() => setEditing(\"\")} />\r\n+          ) : (\r\n+            <>\r\n+              <h3>{gist.file}</h3>\r\n+\r\n+              <SyntaxHighlighter\r\n+                style={style}\r\n+                language={getLanguage(gist.file)}\r\n+              >\r\n+                {gist.code}\r\n+              </SyntaxHighlighter>\r\n+\r\n+              <button type=\"button\" onClick={() => setEditing(id)}>\r\n+                Edit\r\n+              </button>\r\n+            </>\r\n+          )}\r\n+        </li>\r\n+      ))}\r\n+    </ul>\r\n+  );\r\n+}\r\n+\r\n+function AddGist({ uid }: { uid: string }) {\r\n+  const [file, setFile] = useState(\"\");\r\n+  const [code, setCode] = useState(\"\");\r\n+\r\n+  const onSubmit = async (e: FormEvent<HTMLFormElement>) => {\r\n+    e.preventDefault();\r\n+\r\n+    const gistRef = database.ref(\"gists\").push();\r\n+    await database.ref(`userGists/${uid}/${gistRef.key}`).set(true);\r\n+    await gistRef.set({\r\n+      uid,\r\n+      file,\r\n+      code,\r\n+    });\r\n+\r\n+    setFile(\"\");\r\n+    setCode(\"\");\r\n+  };\r\n+\r\n+  return (\r\n+    <form onSubmit={onSubmit}>\r\n+      <h2>Add Gist</h2>\r\n+\r\n+      <input\r\n+        required\r\n+        type=\"text\"\r\n+        value={file}\r\n+        onChange={(e) => setFile(e.target.value)}\r\n+        placeholder=\"file.js\"\r\n+      />\r\n+\r\n+      <textarea\r\n+        required\r\n+        value={code}\r\n+        onChange={(e) => setCode(e.target.value)}\r\n+      />\r\n+\r\n+      <button type=\"submit\">Save</button>\r\n+    </form>\r\n+  );\r\n+}\r\n+\r\n+function EditGist({\r\n+  id,\r\n+  gist,\r\n+  close,\r\n+}: {\r\n+  id: string;\r\n+  gist: IGist;\r\n+  close: () => void;\r\n+}) {\r\n+  const [file, setFile] = useState(gist.file);\r\n+  const [code, setCode] = useState(gist.code);\r\n+\r\n+  const onSubmit = async (e: FormEvent<HTMLFormElement>) => {\r\n+    e.preventDefault();\r\n+\r\n+    const gistRef = database.ref(`gists/${id}`);\r\n+    gistRef.child(\"file\").set(file);\r\n+    gistRef.child(\"code\").set(code);\r\n+\r\n+    close();\r\n+  };\r\n+\r\n+  return (\r\n+    <form onSubmit={onSubmit}>\r\n+      <input\r\n+        required\r\n+        type=\"text\"\r\n+        value={file}\r\n+        onChange={(e) => setFile(e.target.value)}\r\n+        placeholder=\"file.js\"\r\n+      />\r\n+\r\n+      <textarea\r\n+        required\r\n+        value={code}\r\n+        onChange={(e) => setCode(e.target.value)}\r\n+      />\r\n+\r\n+      <button type=\"submit\">Save</button>\r\n+    </form>\r\n+  );\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1630180362175,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,174 @@\n+import { useState, useEffect, FormEvent } from \"react\";\r\n+import { database } from \"../modules/firebase/initialiseFirebase\";\r\n+\r\n+\r\n+export default function Home() {\r\n+  const { user, loading, logout } = useAuth();\r\n+\r\n+  if (loading) return null;\r\n+  if (!user) return <FirebaseAuth />;\r\n+\r\n+  return (\r\n+    <main>\r\n+      <button type=\"button\" onClick={logout} className=\"link\">\r\n+        Logout\r\n+      </button>\r\n+      <AddGist uid={user.uid} />\r\n+      <Gists uid={user.uid} />\r\n+    </main>\r\n+  );\r\n+}\r\n+\r\n+interface IGist {\r\n+  uid: string;\r\n+  file: string;\r\n+  code: string;\r\n+}\r\n+\r\n+const langs: Record<string, string> = {\r\n+  js: \"javascript\",\r\n+  rb: \"ruby\",\r\n+};\r\n+\r\n+function getLanguage(file: string): string {\r\n+  const parts = file.split(\".\");\r\n+  const ext = parts[parts.length - 1];\r\n+  return langs[ext] || \"text\";\r\n+}\r\n+\r\n+function Gists({ uid }: { uid: string }) {\r\n+  const [gists, setGists] = useState<Record<string, IGist>>({});\r\n+  const [editing, setEditing] = useState(\"\");\r\n+\r\n+  useEffect(() => {\r\n+    const userGistsRef = database.ref(`userGists/${uid}`);\r\n+    const refs = [userGistsRef];\r\n+\r\n+    userGistsRef.on(\"child_added\", (child) => {\r\n+      const key: string = child.key as string;\r\n+      const gistRef = database.ref(`gists/${key}`);\r\n+      refs.push(gistRef);\r\n+      gistRef.on(\"value\", (snap) => {\r\n+        setGists((old) => {\r\n+          return { ...old, [key]: snap.val() };\r\n+        });\r\n+      });\r\n+    });\r\n+\r\n+    return () => {\r\n+      refs.forEach((ref) => ref.off());\r\n+    };\r\n+  }, []);\r\n+\r\n+  return (\r\n+    <ul>\r\n+      {Object.entries(gists).map(([id, gist]) => (\r\n+        <li key={id}>\r\n+          {id === editing ? (\r\n+            <EditGist id={id} gist={gist} close={() => setEditing(\"\")} />\r\n+          ) : (\r\n+            <>\r\n+              <h3>{gist.file}</h3>\r\n+\r\n+              <SyntaxHighlighter\r\n+                style={style}\r\n+                language={getLanguage(gist.file)}\r\n+              >\r\n+                {gist.code}\r\n+              </SyntaxHighlighter>\r\n+\r\n+              <button type=\"button\" onClick={() => setEditing(id)}>\r\n+                Edit\r\n+              </button>\r\n+            </>\r\n+          )}\r\n+        </li>\r\n+      ))}\r\n+    </ul>\r\n+  );\r\n+}\r\n+\r\n+function AddGist({ uid }: { uid: string }) {\r\n+  const [file, setFile] = useState(\"\");\r\n+  const [code, setCode] = useState(\"\");\r\n+\r\n+  const onSubmit = async (e: FormEvent<HTMLFormElement>) => {\r\n+    e.preventDefault();\r\n+\r\n+    const gistRef = database.ref(\"gists\").push();\r\n+    await database.ref(`userGists/${uid}/${gistRef.key}`).set(true);\r\n+    await gistRef.set({\r\n+      uid,\r\n+      file,\r\n+      code,\r\n+    });\r\n+\r\n+    setFile(\"\");\r\n+    setCode(\"\");\r\n+  };\r\n+\r\n+  return (\r\n+    <form onSubmit={onSubmit}>\r\n+      <h2>Add Gist</h2>\r\n+\r\n+      <input\r\n+        required\r\n+        type=\"text\"\r\n+        value={file}\r\n+        onChange={(e) => setFile(e.target.value)}\r\n+        placeholder=\"file.js\"\r\n+      />\r\n+\r\n+      <textarea\r\n+        required\r\n+        value={code}\r\n+        onChange={(e) => setCode(e.target.value)}\r\n+      />\r\n+\r\n+      <button type=\"submit\">Save</button>\r\n+    </form>\r\n+  );\r\n+}\r\n+\r\n+function EditGist({\r\n+  id,\r\n+  gist,\r\n+  close,\r\n+}: {\r\n+  id: string;\r\n+  gist: IGist;\r\n+  close: () => void;\r\n+}) {\r\n+  const [file, setFile] = useState(gist.file);\r\n+  const [code, setCode] = useState(gist.code);\r\n+\r\n+  const onSubmit = async (e: FormEvent<HTMLFormElement>) => {\r\n+    e.preventDefault();\r\n+\r\n+    const gistRef = database.ref(`gists/${id}`);\r\n+    gistRef.child(\"file\").set(file);\r\n+    gistRef.child(\"code\").set(code);\r\n+\r\n+    close();\r\n+  };\r\n+\r\n+  return (\r\n+    <form onSubmit={onSubmit}>\r\n+      <input\r\n+        required\r\n+        type=\"text\"\r\n+        value={file}\r\n+        onChange={(e) => setFile(e.target.value)}\r\n+        placeholder=\"file.js\"\r\n+      />\r\n+\r\n+      <textarea\r\n+        required\r\n+        value={code}\r\n+        onChange={(e) => setCode(e.target.value)}\r\n+      />\r\n+\r\n+      <button type=\"submit\">Save</button>\r\n+    </form>\r\n+  );\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1630180375614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,175 @@\n+import { useState, useEffect, FormEvent } from \"react\";\r\n+import FirebaseAuth from \"../modules/firebase/firebaseAuth\";\r\n+import { database } from \"../modules/firebase/initialiseFirebase\";\r\n+\r\n+\r\n+export default function Home() {\r\n+  const { user, loading, logout } = useAuth();\r\n+\r\n+  if (loading) return null;\r\n+  if (!user) return <FirebaseAuth />;\r\n+\r\n+  return (\r\n+    <main>\r\n+      <button type=\"button\" onClick={logout} className=\"link\">\r\n+        Logout\r\n+      </button>\r\n+      <AddGist uid={user.uid} />\r\n+      <Gists uid={user.uid} />\r\n+    </main>\r\n+  );\r\n+}\r\n+\r\n+interface IGist {\r\n+  uid: string;\r\n+  file: string;\r\n+  code: string;\r\n+}\r\n+\r\n+const langs: Record<string, string> = {\r\n+  js: \"javascript\",\r\n+  rb: \"ruby\",\r\n+};\r\n+\r\n+function getLanguage(file: string): string {\r\n+  const parts = file.split(\".\");\r\n+  const ext = parts[parts.length - 1];\r\n+  return langs[ext] || \"text\";\r\n+}\r\n+\r\n+function Gists({ uid }: { uid: string }) {\r\n+  const [gists, setGists] = useState<Record<string, IGist>>({});\r\n+  const [editing, setEditing] = useState(\"\");\r\n+\r\n+  useEffect(() => {\r\n+    const userGistsRef = database.ref(`userGists/${uid}`);\r\n+    const refs = [userGistsRef];\r\n+\r\n+    userGistsRef.on(\"child_added\", (child) => {\r\n+      const key: string = child.key as string;\r\n+      const gistRef = database.ref(`gists/${key}`);\r\n+      refs.push(gistRef);\r\n+      gistRef.on(\"value\", (snap) => {\r\n+        setGists((old) => {\r\n+          return { ...old, [key]: snap.val() };\r\n+        });\r\n+      });\r\n+    });\r\n+\r\n+    return () => {\r\n+      refs.forEach((ref) => ref.off());\r\n+    };\r\n+  }, []);\r\n+\r\n+  return (\r\n+    <ul>\r\n+      {Object.entries(gists).map(([id, gist]) => (\r\n+        <li key={id}>\r\n+          {id === editing ? (\r\n+            <EditGist id={id} gist={gist} close={() => setEditing(\"\")} />\r\n+          ) : (\r\n+            <>\r\n+              <h3>{gist.file}</h3>\r\n+\r\n+              <SyntaxHighlighter\r\n+                style={style}\r\n+                language={getLanguage(gist.file)}\r\n+              >\r\n+                {gist.code}\r\n+              </SyntaxHighlighter>\r\n+\r\n+              <button type=\"button\" onClick={() => setEditing(id)}>\r\n+                Edit\r\n+              </button>\r\n+            </>\r\n+          )}\r\n+        </li>\r\n+      ))}\r\n+    </ul>\r\n+  );\r\n+}\r\n+\r\n+function AddGist({ uid }: { uid: string }) {\r\n+  const [file, setFile] = useState(\"\");\r\n+  const [code, setCode] = useState(\"\");\r\n+\r\n+  const onSubmit = async (e: FormEvent<HTMLFormElement>) => {\r\n+    e.preventDefault();\r\n+\r\n+    const gistRef = database.ref(\"gists\").push();\r\n+    await database.ref(`userGists/${uid}/${gistRef.key}`).set(true);\r\n+    await gistRef.set({\r\n+      uid,\r\n+      file,\r\n+      code,\r\n+    });\r\n+\r\n+    setFile(\"\");\r\n+    setCode(\"\");\r\n+  };\r\n+\r\n+  return (\r\n+    <form onSubmit={onSubmit}>\r\n+      <h2>Add Gist</h2>\r\n+\r\n+      <input\r\n+        required\r\n+        type=\"text\"\r\n+        value={file}\r\n+        onChange={(e) => setFile(e.target.value)}\r\n+        placeholder=\"file.js\"\r\n+      />\r\n+\r\n+      <textarea\r\n+        required\r\n+        value={code}\r\n+        onChange={(e) => setCode(e.target.value)}\r\n+      />\r\n+\r\n+      <button type=\"submit\">Save</button>\r\n+    </form>\r\n+  );\r\n+}\r\n+\r\n+function EditGist({\r\n+  id,\r\n+  gist,\r\n+  close,\r\n+}: {\r\n+  id: string;\r\n+  gist: IGist;\r\n+  close: () => void;\r\n+}) {\r\n+  const [file, setFile] = useState(gist.file);\r\n+  const [code, setCode] = useState(gist.code);\r\n+\r\n+  const onSubmit = async (e: FormEvent<HTMLFormElement>) => {\r\n+    e.preventDefault();\r\n+\r\n+    const gistRef = database.ref(`gists/${id}`);\r\n+    gistRef.child(\"file\").set(file);\r\n+    gistRef.child(\"code\").set(code);\r\n+\r\n+    close();\r\n+  };\r\n+\r\n+  return (\r\n+    <form onSubmit={onSubmit}>\r\n+      <input\r\n+        required\r\n+        type=\"text\"\r\n+        value={file}\r\n+        onChange={(e) => setFile(e.target.value)}\r\n+        placeholder=\"file.js\"\r\n+      />\r\n+\r\n+      <textarea\r\n+        required\r\n+        value={code}\r\n+        onChange={(e) => setCode(e.target.value)}\r\n+      />\r\n+\r\n+      <button type=\"submit\">Save</button>\r\n+    </form>\r\n+  );\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1630180381204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,176 @@\n+import { useState, useEffect, FormEvent } from \"react\";\r\n+import FirebaseAuth from \"../modules/firebase/firebaseAuth\";\r\n+import { database } from \"../modules/firebase/initialiseFirebase\";\r\n+import { useAuth } from \"../modules/providers/authProvider\";\r\n+\r\n+\r\n+export default function Home() {\r\n+  const { user, loading, logout } = useAuth();\r\n+\r\n+  if (loading) return null;\r\n+  if (!user) return <FirebaseAuth />;\r\n+\r\n+  return (\r\n+    <main>\r\n+      <button type=\"button\" onClick={logout} className=\"link\">\r\n+        Logout\r\n+      </button>\r\n+      <AddGist uid={user.uid} />\r\n+      <Gists uid={user.uid} />\r\n+    </main>\r\n+  );\r\n+}\r\n+\r\n+interface IGist {\r\n+  uid: string;\r\n+  file: string;\r\n+  code: string;\r\n+}\r\n+\r\n+const langs: Record<string, string> = {\r\n+  js: \"javascript\",\r\n+  rb: \"ruby\",\r\n+};\r\n+\r\n+function getLanguage(file: string): string {\r\n+  const parts = file.split(\".\");\r\n+  const ext = parts[parts.length - 1];\r\n+  return langs[ext] || \"text\";\r\n+}\r\n+\r\n+function Gists({ uid }: { uid: string }) {\r\n+  const [gists, setGists] = useState<Record<string, IGist>>({});\r\n+  const [editing, setEditing] = useState(\"\");\r\n+\r\n+  useEffect(() => {\r\n+    const userGistsRef = database.ref(`userGists/${uid}`);\r\n+    const refs = [userGistsRef];\r\n+\r\n+    userGistsRef.on(\"child_added\", (child) => {\r\n+      const key: string = child.key as string;\r\n+      const gistRef = database.ref(`gists/${key}`);\r\n+      refs.push(gistRef);\r\n+      gistRef.on(\"value\", (snap) => {\r\n+        setGists((old) => {\r\n+          return { ...old, [key]: snap.val() };\r\n+        });\r\n+      });\r\n+    });\r\n+\r\n+    return () => {\r\n+      refs.forEach((ref) => ref.off());\r\n+    };\r\n+  }, []);\r\n+\r\n+  return (\r\n+    <ul>\r\n+      {Object.entries(gists).map(([id, gist]) => (\r\n+        <li key={id}>\r\n+          {id === editing ? (\r\n+            <EditGist id={id} gist={gist} close={() => setEditing(\"\")} />\r\n+          ) : (\r\n+            <>\r\n+              <h3>{gist.file}</h3>\r\n+\r\n+              <SyntaxHighlighter\r\n+                style={style}\r\n+                language={getLanguage(gist.file)}\r\n+              >\r\n+                {gist.code}\r\n+              </SyntaxHighlighter>\r\n+\r\n+              <button type=\"button\" onClick={() => setEditing(id)}>\r\n+                Edit\r\n+              </button>\r\n+            </>\r\n+          )}\r\n+        </li>\r\n+      ))}\r\n+    </ul>\r\n+  );\r\n+}\r\n+\r\n+function AddGist({ uid }: { uid: string }) {\r\n+  const [file, setFile] = useState(\"\");\r\n+  const [code, setCode] = useState(\"\");\r\n+\r\n+  const onSubmit = async (e: FormEvent<HTMLFormElement>) => {\r\n+    e.preventDefault();\r\n+\r\n+    const gistRef = database.ref(\"gists\").push();\r\n+    await database.ref(`userGists/${uid}/${gistRef.key}`).set(true);\r\n+    await gistRef.set({\r\n+      uid,\r\n+      file,\r\n+      code,\r\n+    });\r\n+\r\n+    setFile(\"\");\r\n+    setCode(\"\");\r\n+  };\r\n+\r\n+  return (\r\n+    <form onSubmit={onSubmit}>\r\n+      <h2>Add Gist</h2>\r\n+\r\n+      <input\r\n+        required\r\n+        type=\"text\"\r\n+        value={file}\r\n+        onChange={(e) => setFile(e.target.value)}\r\n+        placeholder=\"file.js\"\r\n+      />\r\n+\r\n+      <textarea\r\n+        required\r\n+        value={code}\r\n+        onChange={(e) => setCode(e.target.value)}\r\n+      />\r\n+\r\n+      <button type=\"submit\">Save</button>\r\n+    </form>\r\n+  );\r\n+}\r\n+\r\n+function EditGist({\r\n+  id,\r\n+  gist,\r\n+  close,\r\n+}: {\r\n+  id: string;\r\n+  gist: IGist;\r\n+  close: () => void;\r\n+}) {\r\n+  const [file, setFile] = useState(gist.file);\r\n+  const [code, setCode] = useState(gist.code);\r\n+\r\n+  const onSubmit = async (e: FormEvent<HTMLFormElement>) => {\r\n+    e.preventDefault();\r\n+\r\n+    const gistRef = database.ref(`gists/${id}`);\r\n+    gistRef.child(\"file\").set(file);\r\n+    gistRef.child(\"code\").set(code);\r\n+\r\n+    close();\r\n+  };\r\n+\r\n+  return (\r\n+    <form onSubmit={onSubmit}>\r\n+      <input\r\n+        required\r\n+        type=\"text\"\r\n+        value={file}\r\n+        onChange={(e) => setFile(e.target.value)}\r\n+        placeholder=\"file.js\"\r\n+      />\r\n+\r\n+      <textarea\r\n+        required\r\n+        value={code}\r\n+        onChange={(e) => setCode(e.target.value)}\r\n+      />\r\n+\r\n+      <button type=\"submit\">Save</button>\r\n+    </form>\r\n+  );\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1630180492835,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,176 @@\n+import { useState, useEffect, FormEvent } from \"react\";\r\n+import FirebaseAuth from \"../modules/firebase/firebaseAuth\";\r\n+import { database } from \"../modules/firebase/initialiseFirebase\";\r\n+import { useAuth } from \"../modules/providers/authProvider\";\r\n+\r\n+\r\n+export default function Home() {\r\n+  const { user, loading, logout } = useAuth();\r\n+\r\n+  if (loading) return null;\r\n+  if (!user) return <FirebaseAuth />;\r\n+\r\n+  return (\r\n+    <main>\r\n+      <button type=\"button\" onClick={logout} className=\"link\">\r\n+        Logout\r\n+      </button>\r\n+      <AddGist uid={user.uid} />\r\n+      <Gists uid={user.uid} />\r\n+    </main>\r\n+  );\r\n+}\r\n+\r\n+interface IGist {\r\n+  uid: string;\r\n+  file: string;\r\n+  code: string;\r\n+}\r\n+\r\n+const langs: Record<string, string> = {\r\n+  js: \"javascript\",\r\n+  rb: \"ruby\",\r\n+};\r\n+\r\n+function getLanguage(file: string): string {\r\n+  const parts = file.split(\".\");\r\n+  const ext = parts[parts.length - 1];\r\n+  return langs[ext] || \"text\";\r\n+}\r\n+\r\n+function Gists({ uid }: { uid: string }) {\r\n+  const [gists, setGists] = useState<Record<string, IGist>>({});\r\n+  const [editing, setEditing] = useState(\"\");\r\n+\r\n+  useEffect(() => {\r\n+    const userGistsRef = database.ref(`userGists/${uid}`);\r\n+    const refs = [userGistsRef];\r\n+\r\n+    userGistsRef.on(\"child_added\", (child) => {\r\n+      const key: string = child.key as string;\r\n+      const gistRef = database.ref(`gists/${key}`);\r\n+      refs.push(gistRef);\r\n+      gistRef.on(\"value\", (snap) => {\r\n+        setGists((old) => {\r\n+          return { ...old, [key]: snap.val() };\r\n+        });\r\n+      });\r\n+    });\r\n+\r\n+    return () => {\r\n+      refs.forEach((ref) => ref.off());\r\n+    };\r\n+  }, []);\r\n+\r\n+  return (\r\n+    <ul>\r\n+      {Object.entries(gists).map(([id, gist]) => (\r\n+        <li key={id}>\r\n+          {id === editing ? (\r\n+            <EditGist id={id} gist={gist} close={() => setEditing(\"\")} />\r\n+          ) : (\r\n+            <>\r\n+              <h3>{gist.file}</h3>\r\n+\r\n+              <SyntaxHighlighter\r\n+                style={style}\r\n+                language={getLanguage(gist.file)}\r\n+              >\r\n+                {gist.code}\r\n+              </SyntaxHighlighter>\r\n+\r\n+              <button type=\"button\" onClick={() => setEditing(id)}>\r\n+                Edit\r\n+              </button>\r\n+            </>\r\n+          )}\r\n+        </li>\r\n+      ))}\r\n+    </ul>\r\n+  );\r\n+}\r\n+\r\n+function AddGist({ uid }: { uid: string }) {\r\n+  const [file, setFile] = useState(\"\");\r\n+  const [code, setCode] = useState(\"\");\r\n+\r\n+  const onSubmit = async (e: FormEvent<HTMLFormElement>) => {\r\n+    e.preventDefault();\r\n+\r\n+    const gistRef = database.ref(\"gists\").push();\r\n+    await database.ref(`userGists/${uid}/${gistRef.key}`).set(true);\r\n+    await gistRef.set({\r\n+      uid,\r\n+      file,\r\n+      code,\r\n+    });\r\n+\r\n+    setFile(\"\");\r\n+    setCode(\"\");\r\n+  };\r\n+\r\n+  return (\r\n+    <form onSubmit={onSubmit}>\r\n+      <h2>Add Gist</h2>\r\n+\r\n+      <input\r\n+        required\r\n+        type=\"text\"\r\n+        value={file}\r\n+        onChange={(e) => setFile(e.target.value)}\r\n+        placeholder=\"file.js\"\r\n+      />\r\n+\r\n+      <textarea\r\n+        required\r\n+        value={code}\r\n+        onChange={(e) => setCode(e.target.value)}\r\n+      />\r\n+\r\n+      <button type=\"submit\">Save</button>\r\n+    </form>\r\n+  );\r\n+}\r\n+\r\n+function EditGist({\r\n+  id,\r\n+  gist,\r\n+  close,\r\n+}: {\r\n+  id: string;\r\n+  gist: IGist;\r\n+  close: () => void;\r\n+}) {\r\n+  const [file, setFile] = useState(gist.file);\r\n+  const [code, setCode] = useState(gist.code);\r\n+\r\n+  const onSubmit = async (e: FormEvent<HTMLFormElement>) => {\r\n+    e.preventDefault();\r\n+\r\n+    const gistRef = database.ref(`gists/${id}`);\r\n+    gistRef.child(\"file\").set(file);\r\n+    gistRef.child(\"code\").set(code);\r\n+\r\n+    close();\r\n+  };\r\n+\r\n+  return (\r\n+    <form onSubmit={onSubmit}>\r\n+      <input\r\n+        required\r\n+        type=\"text\"\r\n+        value={file}\r\n+        onChange={(e) => setFile(e.target.value)}\r\n+        placeholder=\"file.js\"\r\n+      />\r\n+\r\n+      <textarea\r\n+        required\r\n+        value={code}\r\n+        onChange={(e) => setCode(e.target.value)}\r\n+      />\r\n+\r\n+      <button type=\"submit\">Save</button>\r\n+    </form>\r\n+  );\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1630180509832,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,175 @@\n+import { useState, useEffect, FormEvent } from \"react\";\r\n+import FirebaseAuth from \"../modules/firebase/firebaseAuth\";\r\n+import { database } from \"../modules/firebase/initialiseFirebase\";\r\n+import { useAuth } from \"../modules/providers/authProvider\";\r\n+\r\n+\r\n+export default function Home() {\r\n+  const { user, loading, logout } = useAuth();\r\n+\r\n+  if (loading) return null;\r\n+  if (!user) return <FirebaseAuth />;\r\n+\r\n+  return (\r\n+    <main>\r\n+      <button type=\"button\" onClick={logout} className=\"link\">\r\n+        Logout\r\n+      </button>\r\n+      <AddGist uid={user.uid} />\r\n+      <Gists uid={user.uid} />\r\n+    </main>\r\n+  );\r\n+}\r\n+\r\n+interface IGist {\r\n+  uid: string;\r\n+  file: string;\r\n+  code: string;\r\n+}\r\n+\r\n+const langs: Record<string, string> = {\r\n+  js: \"javascript\",\r\n+  rb: \"ruby\",\r\n+};\r\n+\r\n+function getLanguage(file: string): string {\r\n+  const parts = file.split(\".\");\r\n+  const ext = parts[parts.length - 1];\r\n+  return langs[ext] || \"text\";\r\n+}\r\n+\r\n+function Gists({ uid }: { uid: string }) {\r\n+  const [gists, setGists] = useState<Record<string, IGist>>({});\r\n+  const [editing, setEditing] = useState(\"\");\r\n+\r\n+  useEffect(() => {\r\n+    const userGistsRef = database.ref(`userGists/${uid}`);\r\n+    const refs = [userGistsRef];\r\n+\r\n+    userGistsRef.on(\"child_added\", (child) => {\r\n+      const key: string = child.key as string;\r\n+      const gistRef = database.ref(`gists/${key}`);\r\n+      refs.push(gistRef);\r\n+      gistRef.on(\"value\", (snap) => {\r\n+        setGists((old) => {\r\n+          return { ...old, [key]: snap.val() };\r\n+        });\r\n+      });\r\n+    });\r\n+\r\n+    return () => {\r\n+      refs.forEach((ref) => ref.off());\r\n+    };\r\n+  }, []);\r\n+\r\n+  return (\r\n+    <ul>\r\n+      {Object.entries(gists).map(([id, gist]) => (\r\n+        <li key={id}>\r\n+          {id === editing ? (\r\n+            <EditGist id={id} gist={gist} close={() => setEditing(\"\")} />\r\n+          ) : (\r\n+            <>\r\n+              <h3>{gist.file}</h3>\r\n+\r\n+              <SyntaxHighlighter\r\n+                language={getLanguage(gist.file)}\r\n+              >\r\n+                {gist.code}\r\n+              </SyntaxHighlighter>\r\n+\r\n+              <button type=\"button\" onClick={() => setEditing(id)}>\r\n+                Edit\r\n+              </button>\r\n+            </>\r\n+          )}\r\n+        </li>\r\n+      ))}\r\n+    </ul>\r\n+  );\r\n+}\r\n+\r\n+function AddGist({ uid }: { uid: string }) {\r\n+  const [file, setFile] = useState(\"\");\r\n+  const [code, setCode] = useState(\"\");\r\n+\r\n+  const onSubmit = async (e: FormEvent<HTMLFormElement>) => {\r\n+    e.preventDefault();\r\n+\r\n+    const gistRef = database.ref(\"gists\").push();\r\n+    await database.ref(`userGists/${uid}/${gistRef.key}`).set(true);\r\n+    await gistRef.set({\r\n+      uid,\r\n+      file,\r\n+      code,\r\n+    });\r\n+\r\n+    setFile(\"\");\r\n+    setCode(\"\");\r\n+  };\r\n+\r\n+  return (\r\n+    <form onSubmit={onSubmit}>\r\n+      <h2>Add Gist</h2>\r\n+\r\n+      <input\r\n+        required\r\n+        type=\"text\"\r\n+        value={file}\r\n+        onChange={(e) => setFile(e.target.value)}\r\n+        placeholder=\"file.js\"\r\n+      />\r\n+\r\n+      <textarea\r\n+        required\r\n+        value={code}\r\n+        onChange={(e) => setCode(e.target.value)}\r\n+      />\r\n+\r\n+      <button type=\"submit\">Save</button>\r\n+    </form>\r\n+  );\r\n+}\r\n+\r\n+function EditGist({\r\n+  id,\r\n+  gist,\r\n+  close,\r\n+}: {\r\n+  id: string;\r\n+  gist: IGist;\r\n+  close: () => void;\r\n+}) {\r\n+  const [file, setFile] = useState(gist.file);\r\n+  const [code, setCode] = useState(gist.code);\r\n+\r\n+  const onSubmit = async (e: FormEvent<HTMLFormElement>) => {\r\n+    e.preventDefault();\r\n+\r\n+    const gistRef = database.ref(`gists/${id}`);\r\n+    gistRef.child(\"file\").set(file);\r\n+    gistRef.child(\"code\").set(code);\r\n+\r\n+    close();\r\n+  };\r\n+\r\n+  return (\r\n+    <form onSubmit={onSubmit}>\r\n+      <input\r\n+        required\r\n+        type=\"text\"\r\n+        value={file}\r\n+        onChange={(e) => setFile(e.target.value)}\r\n+        placeholder=\"file.js\"\r\n+      />\r\n+\r\n+      <textarea\r\n+        required\r\n+        value={code}\r\n+        onChange={(e) => setCode(e.target.value)}\r\n+      />\r\n+\r\n+      <button type=\"submit\">Save</button>\r\n+    </form>\r\n+  );\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1630180518541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,175 @@\n+import { useState, useEffect, FormEvent } from \"react\";\r\n+import FirebaseAuth from \"../modules/firebase/firebaseAuth\";\r\n+import { database } from \"../modules/firebase/initialiseFirebase\";\r\n+import { useAuth } from \"../modules/providers/authProvider\";\r\n+\r\n+\r\n+export default function Home() {\r\n+  const { user, loading, logout } = useAuth();\r\n+\r\n+  if (loading) return null;\r\n+  if (!user) return <FirebaseAuth />;\r\n+\r\n+  return (\r\n+    <main>\r\n+      <button type=\"button\" onClick={logout} className=\"link\">\r\n+        Logout\r\n+      </button>\r\n+      <AddGist uid={user.uid} />\r\n+      <Gists uid={user.uid} />\r\n+    </main>\r\n+  );\r\n+}\r\n+\r\n+interface IGist {\r\n+  uid: string;\r\n+  file: string;\r\n+  code: string;\r\n+}\r\n+\r\n+const langs: Record<string, string> = {\r\n+  js: \"javascript\",\r\n+  rb: \"ruby\",\r\n+};\r\n+\r\n+function getLanguage(file: string): string {\r\n+  const parts = file.split(\".\");\r\n+  const ext = parts[parts.length - 1];\r\n+  return langs[ext] || \"text\";\r\n+}\r\n+\r\n+function Gists({ uid }: { uid: string }) {\r\n+  const [gists, setGists] = useState<Record<string, IGist>>({});\r\n+  const [editing, setEditing] = useState(\"\");\r\n+\r\n+  useEffect(() => {\r\n+    const userGistsRef = database.ref(`userGists/${uid}`);\r\n+    const refs = [userGistsRef];\r\n+\r\n+    userGistsRef.on(\"child_added\", (child) => {\r\n+      const key: string = child.key as string;\r\n+      const gistRef = database.ref(`gists/${key}`);\r\n+      refs.push(gistRef);\r\n+      gistRef.on(\"value\", (snap) => {\r\n+        setGists((old) => {\r\n+          return { ...old, [key]: snap.val() };\r\n+        });\r\n+      });\r\n+    });\r\n+\r\n+    return () => {\r\n+      refs.forEach((ref) => ref.off());\r\n+    };\r\n+  }, []);\r\n+\r\n+  return (\r\n+    <ul>\r\n+      {Object.entries(gists).map(([id, gist]) => (\r\n+        <li key={id}>\r\n+          {id === editing ? (\r\n+            <EditGist id={id} gist={gist} close={() => setEditing(\"\")} />\r\n+          ) : (\r\n+            <>\r\n+              <h3>{gist.file}</h3>\r\n+\r\n+              <div\r\n+                language={getLanguage(gist.file)}\r\n+              >\r\n+                {gist.code}\r\n+              </div>\r\n+\r\n+              <button type=\"button\" onClick={() => setEditing(id)}>\r\n+                Edit\r\n+              </button>\r\n+            </>\r\n+          )}\r\n+        </li>\r\n+      ))}\r\n+    </ul>\r\n+  );\r\n+}\r\n+\r\n+function AddGist({ uid }: { uid: string }) {\r\n+  const [file, setFile] = useState(\"\");\r\n+  const [code, setCode] = useState(\"\");\r\n+\r\n+  const onSubmit = async (e: FormEvent<HTMLFormElement>) => {\r\n+    e.preventDefault();\r\n+\r\n+    const gistRef = database.ref(\"gists\").push();\r\n+    await database.ref(`userGists/${uid}/${gistRef.key}`).set(true);\r\n+    await gistRef.set({\r\n+      uid,\r\n+      file,\r\n+      code,\r\n+    });\r\n+\r\n+    setFile(\"\");\r\n+    setCode(\"\");\r\n+  };\r\n+\r\n+  return (\r\n+    <form onSubmit={onSubmit}>\r\n+      <h2>Add Gist</h2>\r\n+\r\n+      <input\r\n+        required\r\n+        type=\"text\"\r\n+        value={file}\r\n+        onChange={(e) => setFile(e.target.value)}\r\n+        placeholder=\"file.js\"\r\n+      />\r\n+\r\n+      <textarea\r\n+        required\r\n+        value={code}\r\n+        onChange={(e) => setCode(e.target.value)}\r\n+      />\r\n+\r\n+      <button type=\"submit\">Save</button>\r\n+    </form>\r\n+  );\r\n+}\r\n+\r\n+function EditGist({\r\n+  id,\r\n+  gist,\r\n+  close,\r\n+}: {\r\n+  id: string;\r\n+  gist: IGist;\r\n+  close: () => void;\r\n+}) {\r\n+  const [file, setFile] = useState(gist.file);\r\n+  const [code, setCode] = useState(gist.code);\r\n+\r\n+  const onSubmit = async (e: FormEvent<HTMLFormElement>) => {\r\n+    e.preventDefault();\r\n+\r\n+    const gistRef = database.ref(`gists/${id}`);\r\n+    gistRef.child(\"file\").set(file);\r\n+    gistRef.child(\"code\").set(code);\r\n+\r\n+    close();\r\n+  };\r\n+\r\n+  return (\r\n+    <form onSubmit={onSubmit}>\r\n+      <input\r\n+        required\r\n+        type=\"text\"\r\n+        value={file}\r\n+        onChange={(e) => setFile(e.target.value)}\r\n+        placeholder=\"file.js\"\r\n+      />\r\n+\r\n+      <textarea\r\n+        required\r\n+        value={code}\r\n+        onChange={(e) => setCode(e.target.value)}\r\n+      />\r\n+\r\n+      <button type=\"submit\">Save</button>\r\n+    </form>\r\n+  );\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1630180571547,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,22 @@\n+import { useState, useEffect, FormEvent } from \"react\";\r\n+import FirebaseAuth from \"../modules/firebase/firebaseAuth\";\r\n+import { database } from \"../modules/firebase/initialiseFirebase\";\r\n+import { useAuth } from \"../modules/providers/authProvider\";\r\n+\r\n+\r\n+export default function Home() {\r\n+  const { user, loading, logout } = useAuth();\r\n+\r\n+  if (loading) return null;\r\n+  if (!user) return <FirebaseAuth />;\r\n+\r\n+  return (\r\n+    <main>\r\n+      <button type=\"button\" onClick={logout} className=\"link\">\r\n+        Logout\r\n+      </button>\r\n+      <AddGist uid={user.uid} />\r\n+      <Gists uid={user.uid} />\r\n+    </main>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1630180589415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,20 @@\n+import { useState, useEffect, FormEvent } from \"react\";\r\n+import FirebaseAuth from \"../modules/firebase/firebaseAuth\";\r\n+import { database } from \"../modules/firebase/initialiseFirebase\";\r\n+import { useAuth } from \"../modules/providers/authProvider\";\r\n+\r\n+\r\n+export default function Home() {\r\n+  const { user, loading, logout } = useAuth();\r\n+\r\n+  if (loading) return null;\r\n+  if (!user) return <FirebaseAuth />;\r\n+\r\n+  return (\r\n+    <main>\r\n+      <button type=\"button\" onClick={logout} className=\"link\">\r\n+        Logout\r\n+      </button>\r\n+    </main>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1630181727383,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,2255 +1,19 @@\n-import { useState, useEffect, FormEvent } from \"react\";\r\n-import FirebaseAuth from \"../modules/firebase/firebaseAuth\";\r\n-import { database } from \"../modules/firebase/initialiseFirebase\";\r\n-import { useAuth } from \"../modules/providers/authProvider\";\r\n-\r\n-\r\n-export default function Home() {\r\n-  const { user, loading, logout } = useAuth();\r\n-\r\n-  if (loading) return null;\r\n-  if (!user) return <FirebaseAuth />;\r\n-\r\n-  return (\r\n-    <main>\r\n-      <button type=\"button\" onClick={logout} className=\"link\">\r\n-        Logout\r\n-      </button>\r\n-    </main>\r\n-  );\r\n-}\r\n-import { useState, useEffect, FormEvent } from \"react\";\r\n-import FirebaseAuth from \"../modules/firebase/firebaseAuth\";\r\n-import { database } from \"../modules/firebase/initialiseFirebase\";\r\n-import { useAuth } from \"../modules/providers/authProvider\";\r\n-\r\n-\r\n-export default function Home() {\r\n-  const { user, loading, logout } = useAuth();\r\n-\r\n-  if (loading) return null;\r\n-  if (!user) return <FirebaseAuth />;\r\n-\r\n-  return (\r\n-    <main>\r\n-      <button type=\"button\" onClick={logout} className=\"link\">\r\n-        Logout\r\n-      </button>\r\n-      <AddGist uid={user.uid} />\r\n-      <Gists uid={user.uid} />\r\n-    </main>\r\n-  );\r\n-}\r\n-import { useState, useEffect, FormEvent } from \"react\";\r\n-import FirebaseAuth from \"../modules/firebase/firebaseAuth\";\r\n-import { database } from \"../modules/firebase/initialiseFirebase\";\r\n-import { useAuth } from \"../modules/providers/authProvider\";\r\n-\r\n-\r\n-export default function Home() {\r\n-  const { user, loading, logout } = useAuth();\r\n-\r\n-  if (loading) return null;\r\n-  if (!user) return <FirebaseAuth />;\r\n-\r\n-  return (\r\n-    <main>\r\n-      <button type=\"button\" onClick={logout} className=\"link\">\r\n-        Logout\r\n-      </button>\r\n-      <AddGist uid={user.uid} />\r\n-      <Gists uid={user.uid} />\r\n-    </main>\r\n-  );\r\n-}\r\n-\r\n-interface IGist {\r\n-  uid: string;\r\n-  file: string;\r\n-  code: string;\r\n-}\r\n-\r\n-const langs: Record<string, string> = {\r\n-  js: \"javascript\",\r\n-  rb: \"ruby\",\r\n-};\r\n-\r\n-function getLanguage(file: string): string {\r\n-  const parts = file.split(\".\");\r\n-  const ext = parts[parts.length - 1];\r\n-  return langs[ext] || \"text\";\r\n-}\r\n-\r\n-function Gists({ uid }: { uid: string }) {\r\n-  const [gists, setGists] = useState<Record<string, IGist>>({});\r\n-  const [editing, setEditing] = useState(\"\");\r\n-\r\n-  useEffect(() => {\r\n-    const userGistsRef = database.ref(`userGists/${uid}`);\r\n-    const refs = [userGistsRef];\r\n-\r\n-    userGistsRef.on(\"child_added\", (child) => {\r\n-      const key: string = child.key as string;\r\n-      const gistRef = database.ref(`gists/${key}`);\r\n-      refs.push(gistRef);\r\n-      gistRef.on(\"value\", (snap) => {\r\n-        setGists((old) => {\r\n-          return { ...old, [key]: snap.val() };\r\n-        });\r\n-      });\r\n-    });\r\n-\r\n-    return () => {\r\n-      refs.forEach((ref) => ref.off());\r\n-    };\r\n-  }, []);\r\n-\r\n-  return (\r\n-    <ul>\r\n-      {Object.entries(gists).map(([id, gist]) => (\r\n-        <li key={id}>\r\n-          {id === editing ? (\r\n-            <EditGist id={id} gist={gist} close={() => setEditing(\"\")} />\r\n-          ) : (\r\n-            <>\r\n-              <h3>{gist.file}</h3>\r\n-\r\n-              <div\r\n-                language={getLanguage(gist.file)}\r\n-              >\r\n-                {gist.code}\r\n-              </div>\r\n-\r\n-              <button type=\"button\" onClick={() => setEditing(id)}>\r\n-                Edit\r\n-              </button>\r\n-            </>\r\n-          )}\r\n-        </li>\r\n-      ))}\r\n-    </ul>\r\n-  );\r\n-}\r\n-\r\n-function AddGist({ uid }: { uid: string }) {\r\n-  const [file, setFile] = useState(\"\");\r\n-  const [code, setCode] = useState(\"\");\r\n-\r\n-  const onSubmit = async (e: FormEvent<HTMLFormElement>) => {\r\n-    e.preventDefault();\r\n-\r\n-    const gistRef = database.ref(\"gists\").push();\r\n-    await database.ref(`userGists/${uid}/${gistRef.key}`).set(true);\r\n-    await gistRef.set({\r\n-      uid,\r\n-      file,\r\n-      code,\r\n-    });\r\n-\r\n-    setFile(\"\");\r\n-    setCode(\"\");\r\n-  };\r\n-\r\n-  return (\r\n-    <form onSubmit={onSubmit}>\r\n-      <h2>Add Gist</h2>\r\n-\r\n-      <input\r\n-        required\r\n-        type=\"text\"\r\n-        value={file}\r\n-        onChange={(e) => setFile(e.target.value)}\r\n-        placeholder=\"file.js\"\r\n-      />\r\n-\r\n-      <textarea\r\n-        required\r\n-        value={code}\r\n-        onChange={(e) => setCode(e.target.value)}\r\n-      />\r\n-\r\n-      <button type=\"submit\">Save</button>\r\n-    </form>\r\n-  );\r\n-}\r\n-\r\n-function EditGist({\r\n-  id,\r\n-  gist,\r\n-  close,\r\n-}: {\r\n-  id: string;\r\n-  gist: IGist;\r\n-  close: () => void;\r\n-}) {\r\n-  const [file, setFile] = useState(gist.file);\r\n-  const [code, setCode] = useState(gist.code);\r\n-\r\n-  const onSubmit = async (e: FormEvent<HTMLFormElement>) => {\r\n-    e.preventDefault();\r\n-\r\n-    const gistRef = database.ref(`gists/${id}`);\r\n-    gistRef.child(\"file\").set(file);\r\n-    gistRef.child(\"code\").set(code);\r\n-\r\n-    close();\r\n-  };\r\n-\r\n-  return (\r\n-    <form onSubmit={onSubmit}>\r\n-      <input\r\n-        required\r\n-        type=\"text\"\r\n-        value={file}\r\n-        onChange={(e) => setFile(e.target.value)}\r\n-        placeholder=\"file.js\"\r\n-      />\r\n-\r\n-      <textarea\r\n-        required\r\n-        value={code}\r\n-        onChange={(e) => setCode(e.target.value)}\r\n-      />\r\n-\r\n-      <button type=\"submit\">Save</button>\r\n-    </form>\r\n-  );\r\n-}\n-import { useState, useEffect, FormEvent } from \"react\";\r\n-import FirebaseAuth from \"../modules/firebase/firebaseAuth\";\r\n-import { database } from \"../modules/firebase/initialiseFirebase\";\r\n-import { useAuth } from \"../modules/providers/authProvider\";\r\n-\r\n-\r\n-export default function Home() {\r\n-  const { user, loading, logout } = useAuth();\r\n-\r\n-  if (loading) return null;\r\n-  if (!user) return <FirebaseAuth />;\r\n-\r\n-  return (\r\n-    <main>\r\n-      <button type=\"button\" onClick={logout} className=\"link\">\r\n-        Logout\r\n-      </button>\r\n-      <AddGist uid={user.uid} />\r\n-      <Gists uid={user.uid} />\r\n-    </main>\r\n-  );\r\n-}\r\n-\r\n-interface IGist {\r\n-  uid: string;\r\n-  file: string;\r\n-  code: string;\r\n-}\r\n-\r\n-const langs: Record<string, string> = {\r\n-  js: \"javascript\",\r\n-  rb: \"ruby\",\r\n-};\r\n-\r\n-function getLanguage(file: string): string {\r\n-  const parts = file.split(\".\");\r\n-  const ext = parts[parts.length - 1];\r\n-  return langs[ext] || \"text\";\r\n-}\r\n-\r\n-function Gists({ uid }: { uid: string }) {\r\n-  const [gists, setGists] = useState<Record<string, IGist>>({});\r\n-  const [editing, setEditing] = useState(\"\");\r\n-\r\n-  useEffect(() => {\r\n-    const userGistsRef = database.ref(`userGists/${uid}`);\r\n-    const refs = [userGistsRef];\r\n-\r\n-    userGistsRef.on(\"child_added\", (child) => {\r\n-      const key: string = child.key as string;\r\n-      const gistRef = database.ref(`gists/${key}`);\r\n-      refs.push(gistRef);\r\n-      gistRef.on(\"value\", (snap) => {\r\n-        setGists((old) => {\r\n-          return { ...old, [key]: snap.val() };\r\n-        });\r\n-      });\r\n-    });\r\n-\r\n-    return () => {\r\n-      refs.forEach((ref) => ref.off());\r\n-    };\r\n-  }, []);\r\n-\r\n-  return (\r\n-    <ul>\r\n-      {Object.entries(gists).map(([id, gist]) => (\r\n-        <li key={id}>\r\n-          {id === editing ? (\r\n-            <EditGist id={id} gist={gist} close={() => setEditing(\"\")} />\r\n-          ) : (\r\n-            <>\r\n-              <h3>{gist.file}</h3>\r\n-\r\n-              <SyntaxHighlighter\r\n-                language={getLanguage(gist.file)}\r\n-              >\r\n-                {gist.code}\r\n-              </SyntaxHighlighter>\r\n-\r\n-              <button type=\"button\" onClick={() => setEditing(id)}>\r\n-                Edit\r\n-              </button>\r\n-            </>\r\n-          )}\r\n-        </li>\r\n-      ))}\r\n-    </ul>\r\n-  );\r\n-}\r\n-\r\n-function AddGist({ uid }: { uid: string }) {\r\n-  const [file, setFile] = useState(\"\");\r\n-  const [code, setCode] = useState(\"\");\r\n-\r\n-  const onSubmit = async (e: FormEvent<HTMLFormElement>) => {\r\n-    e.preventDefault();\r\n-\r\n-    const gistRef = database.ref(\"gists\").push();\r\n-    await database.ref(`userGists/${uid}/${gistRef.key}`).set(true);\r\n-    await gistRef.set({\r\n-      uid,\r\n-      file,\r\n-      code,\r\n-    });\r\n-\r\n-    setFile(\"\");\r\n-    setCode(\"\");\r\n-  };\r\n-\r\n-  return (\r\n-    <form onSubmit={onSubmit}>\r\n-      <h2>Add Gist</h2>\r\n-\r\n-      <input\r\n-        required\r\n-        type=\"text\"\r\n-        value={file}\r\n-        onChange={(e) => setFile(e.target.value)}\r\n-        placeholder=\"file.js\"\r\n-      />\r\n-\r\n-      <textarea\r\n-        required\r\n-        value={code}\r\n-        onChange={(e) => setCode(e.target.value)}\r\n-      />\r\n-\r\n-      <button type=\"submit\">Save</button>\r\n-    </form>\r\n-  );\r\n-}\r\n-\r\n-function EditGist({\r\n-  id,\r\n-  gist,\r\n-  close,\r\n-}: {\r\n-  id: string;\r\n-  gist: IGist;\r\n-  close: () => void;\r\n-}) {\r\n-  const [file, setFile] = useState(gist.file);\r\n-  const [code, setCode] = useState(gist.code);\r\n-\r\n-  const onSubmit = async (e: FormEvent<HTMLFormElement>) => {\r\n-    e.preventDefault();\r\n-\r\n-    const gistRef = database.ref(`gists/${id}`);\r\n-    gistRef.child(\"file\").set(file);\r\n-    gistRef.child(\"code\").set(code);\r\n-\r\n-    close();\r\n-  };\r\n-\r\n-  return (\r\n-    <form onSubmit={onSubmit}>\r\n-      <input\r\n-        required\r\n-        type=\"text\"\r\n-        value={file}\r\n-        onChange={(e) => setFile(e.target.value)}\r\n-        placeholder=\"file.js\"\r\n-      />\r\n-\r\n-      <textarea\r\n-        required\r\n-        value={code}\r\n-        onChange={(e) => setCode(e.target.value)}\r\n-      />\r\n-\r\n-      <button type=\"submit\">Save</button>\r\n-    </form>\r\n-  );\r\n-}\n-import { useState, useEffect, FormEvent } from \"react\";\r\n-import FirebaseAuth from \"../modules/firebase/firebaseAuth\";\r\n-import { database } from \"../modules/firebase/initialiseFirebase\";\r\n-import { useAuth } from \"../modules/providers/authProvider\";\r\n-\r\n-\r\n-export default function Home() {\r\n-  const { user, loading, logout } = useAuth();\r\n-\r\n-  if (loading) return null;\r\n-  if (!user) return <FirebaseAuth />;\r\n-\r\n-  return (\r\n-    <main>\r\n-      <button type=\"button\" onClick={logout} className=\"link\">\r\n-        Logout\r\n-      </button>\r\n-      <AddGist uid={user.uid} />\r\n-      <Gists uid={user.uid} />\r\n-    </main>\r\n-  );\r\n-}\r\n-\r\n-interface IGist {\r\n-  uid: string;\r\n-  file: string;\r\n-  code: string;\r\n-}\r\n-\r\n-const langs: Record<string, string> = {\r\n-  js: \"javascript\",\r\n-  rb: \"ruby\",\r\n-};\r\n-\r\n-function getLanguage(file: string): string {\r\n-  const parts = file.split(\".\");\r\n-  const ext = parts[parts.length - 1];\r\n-  return langs[ext] || \"text\";\r\n-}\r\n-\r\n-function Gists({ uid }: { uid: string }) {\r\n-  const [gists, setGists] = useState<Record<string, IGist>>({});\r\n-  const [editing, setEditing] = useState(\"\");\r\n-\r\n-  useEffect(() => {\r\n-    const userGistsRef = database.ref(`userGists/${uid}`);\r\n-    const refs = [userGistsRef];\r\n-\r\n-    userGistsRef.on(\"child_added\", (child) => {\r\n-      const key: string = child.key as string;\r\n-      const gistRef = database.ref(`gists/${key}`);\r\n-      refs.push(gistRef);\r\n-      gistRef.on(\"value\", (snap) => {\r\n-        setGists((old) => {\r\n-          return { ...old, [key]: snap.val() };\r\n-        });\r\n-      });\r\n-    });\r\n-\r\n-    return () => {\r\n-      refs.forEach((ref) => ref.off());\r\n-    };\r\n-  }, []);\r\n-\r\n-  return (\r\n-    <ul>\r\n-      {Object.entries(gists).map(([id, gist]) => (\r\n-        <li key={id}>\r\n-          {id === editing ? (\r\n-            <EditGist id={id} gist={gist} close={() => setEditing(\"\")} />\r\n-          ) : (\r\n-            <>\r\n-              <h3>{gist.file}</h3>\r\n-\r\n-              <SyntaxHighlighter\r\n-                style={style}\r\n-                language={getLanguage(gist.file)}\r\n-              >\r\n-                {gist.code}\r\n-              </SyntaxHighlighter>\r\n-\r\n-              <button type=\"button\" onClick={() => setEditing(id)}>\r\n-                Edit\r\n-              </button>\r\n-            </>\r\n-          )}\r\n-        </li>\r\n-      ))}\r\n-    </ul>\r\n-  );\r\n-}\r\n-\r\n-function AddGist({ uid }: { uid: string }) {\r\n-  const [file, setFile] = useState(\"\");\r\n-  const [code, setCode] = useState(\"\");\r\n-\r\n-  const onSubmit = async (e: FormEvent<HTMLFormElement>) => {\r\n-    e.preventDefault();\r\n-\r\n-    const gistRef = database.ref(\"gists\").push();\r\n-    await database.ref(`userGists/${uid}/${gistRef.key}`).set(true);\r\n-    await gistRef.set({\r\n-      uid,\r\n-      file,\r\n-      code,\r\n-    });\r\n-\r\n-    setFile(\"\");\r\n-    setCode(\"\");\r\n-  };\r\n-\r\n-  return (\r\n-    <form onSubmit={onSubmit}>\r\n-      <h2>Add Gist</h2>\r\n-\r\n-      <input\r\n-        required\r\n-        type=\"text\"\r\n-        value={file}\r\n-        onChange={(e) => setFile(e.target.value)}\r\n-        placeholder=\"file.js\"\r\n-      />\r\n-\r\n-      <textarea\r\n-        required\r\n-        value={code}\r\n-        onChange={(e) => setCode(e.target.value)}\r\n-      />\r\n-\r\n-      <button type=\"submit\">Save</button>\r\n-    </form>\r\n-  );\r\n-}\r\n-\r\n-function EditGist({\r\n-  id,\r\n-  gist,\r\n-  close,\r\n-}: {\r\n-  id: string;\r\n-  gist: IGist;\r\n-  close: () => void;\r\n-}) {\r\n-  const [file, setFile] = useState(gist.file);\r\n-  const [code, setCode] = useState(gist.code);\r\n-\r\n-  const onSubmit = async (e: FormEvent<HTMLFormElement>) => {\r\n-    e.preventDefault();\r\n-\r\n-    const gistRef = database.ref(`gists/${id}`);\r\n-    gistRef.child(\"file\").set(file);\r\n-    gistRef.child(\"code\").set(code);\r\n-\r\n-    close();\r\n-  };\r\n-\r\n-  return (\r\n-    <form onSubmit={onSubmit}>\r\n-      <input\r\n-        required\r\n-        type=\"text\"\r\n-        value={file}\r\n-        onChange={(e) => setFile(e.target.value)}\r\n-        placeholder=\"file.js\"\r\n-      />\r\n-\r\n-      <textarea\r\n-        required\r\n-        value={code}\r\n-        onChange={(e) => setCode(e.target.value)}\r\n-      />\r\n-\r\n-      <button type=\"submit\">Save</button>\r\n-    </form>\r\n-  );\r\n-}\n-import { useState, useEffect, FormEvent } from \"react\";\r\n-import FirebaseAuth from \"../modules/firebase/firebaseAuth\";\r\n-import { database } from \"../modules/firebase/initialiseFirebase\";\r\n-import { useAuth } from \"../modules/providers/authProvider\";\r\n-\r\n-\r\n-export default function Home() {\r\n-  const { user, loading, logout } = useAuth();\r\n-\r\n-  if (loading) return null;\r\n-  if (!user) return <FirebaseAuth />;\r\n-\r\n-  return (\r\n-    <main>\r\n-      <button type=\"button\" onClick={logout} className=\"link\">\r\n-        Logout\r\n-      </button>\r\n-      <AddGist uid={user.uid} />\r\n-      <Gists uid={user.uid} />\r\n-    </main>\r\n-  );\r\n-}\r\n-\r\n-interface IGist {\r\n-  uid: string;\r\n-  file: string;\r\n-  code: string;\r\n-}\r\n-\r\n-const langs: Record<string, string> = {\r\n-  js: \"javascript\",\r\n-  rb: \"ruby\",\r\n-};\r\n-\r\n-function getLanguage(file: string): string {\r\n-  const parts = file.split(\".\");\r\n-  const ext = parts[parts.length - 1];\r\n-  return langs[ext] || \"text\";\r\n-}\r\n-\r\n-function Gists({ uid }: { uid: string }) {\r\n-  const [gists, setGists] = useState<Record<string, IGist>>({});\r\n-  const [editing, setEditing] = useState(\"\");\r\n-\r\n-  useEffect(() => {\r\n-    const userGistsRef = database.ref(`userGists/${uid}`);\r\n-    const refs = [userGistsRef];\r\n-\r\n-    userGistsRef.on(\"child_added\", (child) => {\r\n-      const key: string = child.key as string;\r\n-      const gistRef = database.ref(`gists/${key}`);\r\n-      refs.push(gistRef);\r\n-      gistRef.on(\"value\", (snap) => {\r\n-        setGists((old) => {\r\n-          return { ...old, [key]: snap.val() };\r\n-        });\r\n-      });\r\n-    });\r\n-\r\n-    return () => {\r\n-      refs.forEach((ref) => ref.off());\r\n-    };\r\n-  }, []);\r\n-\r\n-  return (\r\n-    <ul>\r\n-      {Object.entries(gists).map(([id, gist]) => (\r\n-        <li key={id}>\r\n-          {id === editing ? (\r\n-            <EditGist id={id} gist={gist} close={() => setEditing(\"\")} />\r\n-          ) : (\r\n-            <>\r\n-              <h3>{gist.file}</h3>\r\n-\r\n-              <SyntaxHighlighter\r\n-                style={style}\r\n-                language={getLanguage(gist.file)}\r\n-              >\r\n-                {gist.code}\r\n-              </SyntaxHighlighter>\r\n-\r\n-              <button type=\"button\" onClick={() => setEditing(id)}>\r\n-                Edit\r\n-              </button>\r\n-            </>\r\n-          )}\r\n-        </li>\r\n-      ))}\r\n-    </ul>\r\n-  );\r\n-}\r\n-\r\n-function AddGist({ uid }: { uid: string }) {\r\n-  const [file, setFile] = useState(\"\");\r\n-  const [code, setCode] = useState(\"\");\r\n-\r\n-  const onSubmit = async (e: FormEvent<HTMLFormElement>) => {\r\n-    e.preventDefault();\r\n-\r\n-    const gistRef = database.ref(\"gists\").push();\r\n-    await database.ref(`userGists/${uid}/${gistRef.key}`).set(true);\r\n-    await gistRef.set({\r\n-      uid,\r\n-      file,\r\n-      code,\r\n-    });\r\n-\r\n-    setFile(\"\");\r\n-    setCode(\"\");\r\n-  };\r\n-\r\n-  return (\r\n-    <form onSubmit={onSubmit}>\r\n-      <h2>Add Gist</h2>\r\n-\r\n-      <input\r\n-        required\r\n-        type=\"text\"\r\n-        value={file}\r\n-        onChange={(e) => setFile(e.target.value)}\r\n-        placeholder=\"file.js\"\r\n-      />\r\n-\r\n-      <textarea\r\n-        required\r\n-        value={code}\r\n-        onChange={(e) => setCode(e.target.value)}\r\n-      />\r\n-\r\n-      <button type=\"submit\">Save</button>\r\n-    </form>\r\n-  );\r\n-}\r\n-\r\n-function EditGist({\r\n-  id,\r\n-  gist,\r\n-  close,\r\n-}: {\r\n-  id: string;\r\n-  gist: IGist;\r\n-  close: () => void;\r\n-}) {\r\n-  const [file, setFile] = useState(gist.file);\r\n-  const [code, setCode] = useState(gist.code);\r\n-\r\n-  const onSubmit = async (e: FormEvent<HTMLFormElement>) => {\r\n-    e.preventDefault();\r\n-\r\n-    const gistRef = database.ref(`gists/${id}`);\r\n-    gistRef.child(\"file\").set(file);\r\n-    gistRef.child(\"code\").set(code);\r\n-\r\n-    close();\r\n-  };\r\n-\r\n-  return (\r\n-    <form onSubmit={onSubmit}>\r\n-      <input\r\n-        required\r\n-        type=\"text\"\r\n-        value={file}\r\n-        onChange={(e) => setFile(e.target.value)}\r\n-        placeholder=\"file.js\"\r\n-      />\r\n-\r\n-      <textarea\r\n-        required\r\n-        value={code}\r\n-        onChange={(e) => setCode(e.target.value)}\r\n-      />\r\n-\r\n-      <button type=\"submit\">Save</button>\r\n-    </form>\r\n-  );\r\n-}\n-import { useState, useEffect, FormEvent } from \"react\";\r\n-import FirebaseAuth from \"../modules/firebase/firebaseAuth\";\r\n-import { database } from \"../modules/firebase/initialiseFirebase\";\r\n-\r\n-\r\n-export default function Home() {\r\n-  const { user, loading, logout } = useAuth();\r\n-\r\n-  if (loading) return null;\r\n-  if (!user) return <FirebaseAuth />;\r\n-\r\n-  return (\r\n-    <main>\r\n-      <button type=\"button\" onClick={logout} className=\"link\">\r\n-        Logout\r\n-      </button>\r\n-      <AddGist uid={user.uid} />\r\n-      <Gists uid={user.uid} />\r\n-    </main>\r\n-  );\r\n-}\r\n-\r\n-interface IGist {\r\n-  uid: string;\r\n-  file: string;\r\n-  code: string;\r\n-}\r\n-\r\n-const langs: Record<string, string> = {\r\n-  js: \"javascript\",\r\n-  rb: \"ruby\",\r\n-};\r\n-\r\n-function getLanguage(file: string): string {\r\n-  const parts = file.split(\".\");\r\n-  const ext = parts[parts.length - 1];\r\n-  return langs[ext] || \"text\";\r\n-}\r\n-\r\n-function Gists({ uid }: { uid: string }) {\r\n-  const [gists, setGists] = useState<Record<string, IGist>>({});\r\n-  const [editing, setEditing] = useState(\"\");\r\n-\r\n-  useEffect(() => {\r\n-    const userGistsRef = database.ref(`userGists/${uid}`);\r\n-    const refs = [userGistsRef];\r\n-\r\n-    userGistsRef.on(\"child_added\", (child) => {\r\n-      const key: string = child.key as string;\r\n-      const gistRef = database.ref(`gists/${key}`);\r\n-      refs.push(gistRef);\r\n-      gistRef.on(\"value\", (snap) => {\r\n-        setGists((old) => {\r\n-          return { ...old, [key]: snap.val() };\r\n-        });\r\n-      });\r\n-    });\r\n-\r\n-    return () => {\r\n-      refs.forEach((ref) => ref.off());\r\n-    };\r\n-  }, []);\r\n-\r\n-  return (\r\n-    <ul>\r\n-      {Object.entries(gists).map(([id, gist]) => (\r\n-        <li key={id}>\r\n-          {id === editing ? (\r\n-            <EditGist id={id} gist={gist} close={() => setEditing(\"\")} />\r\n-          ) : (\r\n-            <>\r\n-              <h3>{gist.file}</h3>\r\n-\r\n-              <SyntaxHighlighter\r\n-                style={style}\r\n-                language={getLanguage(gist.file)}\r\n-              >\r\n-                {gist.code}\r\n-              </SyntaxHighlighter>\r\n-\r\n-              <button type=\"button\" onClick={() => setEditing(id)}>\r\n-                Edit\r\n-              </button>\r\n-            </>\r\n-          )}\r\n-        </li>\r\n-      ))}\r\n-    </ul>\r\n-  );\r\n-}\r\n-\r\n-function AddGist({ uid }: { uid: string }) {\r\n-  const [file, setFile] = useState(\"\");\r\n-  const [code, setCode] = useState(\"\");\r\n-\r\n-  const onSubmit = async (e: FormEvent<HTMLFormElement>) => {\r\n-    e.preventDefault();\r\n-\r\n-    const gistRef = database.ref(\"gists\").push();\r\n-    await database.ref(`userGists/${uid}/${gistRef.key}`).set(true);\r\n-    await gistRef.set({\r\n-      uid,\r\n-      file,\r\n-      code,\r\n-    });\r\n-\r\n-    setFile(\"\");\r\n-    setCode(\"\");\r\n-  };\r\n-\r\n-  return (\r\n-    <form onSubmit={onSubmit}>\r\n-      <h2>Add Gist</h2>\r\n-\r\n-      <input\r\n-        required\r\n-        type=\"text\"\r\n-        value={file}\r\n-        onChange={(e) => setFile(e.target.value)}\r\n-        placeholder=\"file.js\"\r\n-      />\r\n-\r\n-      <textarea\r\n-        required\r\n-        value={code}\r\n-        onChange={(e) => setCode(e.target.value)}\r\n-      />\r\n-\r\n-      <button type=\"submit\">Save</button>\r\n-    </form>\r\n-  );\r\n-}\r\n-\r\n-function EditGist({\r\n-  id,\r\n-  gist,\r\n-  close,\r\n-}: {\r\n-  id: string;\r\n-  gist: IGist;\r\n-  close: () => void;\r\n-}) {\r\n-  const [file, setFile] = useState(gist.file);\r\n-  const [code, setCode] = useState(gist.code);\r\n-\r\n-  const onSubmit = async (e: FormEvent<HTMLFormElement>) => {\r\n-    e.preventDefault();\r\n-\r\n-    const gistRef = database.ref(`gists/${id}`);\r\n-    gistRef.child(\"file\").set(file);\r\n-    gistRef.child(\"code\").set(code);\r\n-\r\n-    close();\r\n-  };\r\n-\r\n-  return (\r\n-    <form onSubmit={onSubmit}>\r\n-      <input\r\n-        required\r\n-        type=\"text\"\r\n-        value={file}\r\n-        onChange={(e) => setFile(e.target.value)}\r\n-        placeholder=\"file.js\"\r\n-      />\r\n-\r\n-      <textarea\r\n-        required\r\n-        value={code}\r\n-        onChange={(e) => setCode(e.target.value)}\r\n-      />\r\n-\r\n-      <button type=\"submit\">Save</button>\r\n-    </form>\r\n-  );\r\n-}\n-import { useState, useEffect, FormEvent } from \"react\";\r\n-import { database } from \"../modules/firebase/initialiseFirebase\";\r\n-\r\n-\r\n-export default function Home() {\r\n-  const { user, loading, logout } = useAuth();\r\n-\r\n-  if (loading) return null;\r\n-  if (!user) return <FirebaseAuth />;\r\n-\r\n-  return (\r\n-    <main>\r\n-      <button type=\"button\" onClick={logout} className=\"link\">\r\n-        Logout\r\n-      </button>\r\n-      <AddGist uid={user.uid} />\r\n-      <Gists uid={user.uid} />\r\n-    </main>\r\n-  );\r\n-}\r\n-\r\n-interface IGist {\r\n-  uid: string;\r\n-  file: string;\r\n-  code: string;\r\n-}\r\n-\r\n-const langs: Record<string, string> = {\r\n-  js: \"javascript\",\r\n-  rb: \"ruby\",\r\n-};\r\n-\r\n-function getLanguage(file: string): string {\r\n-  const parts = file.split(\".\");\r\n-  const ext = parts[parts.length - 1];\r\n-  return langs[ext] || \"text\";\r\n-}\r\n-\r\n-function Gists({ uid }: { uid: string }) {\r\n-  const [gists, setGists] = useState<Record<string, IGist>>({});\r\n-  const [editing, setEditing] = useState(\"\");\r\n-\r\n-  useEffect(() => {\r\n-    const userGistsRef = database.ref(`userGists/${uid}`);\r\n-    const refs = [userGistsRef];\r\n-\r\n-    userGistsRef.on(\"child_added\", (child) => {\r\n-      const key: string = child.key as string;\r\n-      const gistRef = database.ref(`gists/${key}`);\r\n-      refs.push(gistRef);\r\n-      gistRef.on(\"value\", (snap) => {\r\n-        setGists((old) => {\r\n-          return { ...old, [key]: snap.val() };\r\n-        });\r\n-      });\r\n-    });\r\n-\r\n-    return () => {\r\n-      refs.forEach((ref) => ref.off());\r\n-    };\r\n-  }, []);\r\n-\r\n-  return (\r\n-    <ul>\r\n-      {Object.entries(gists).map(([id, gist]) => (\r\n-        <li key={id}>\r\n-          {id === editing ? (\r\n-            <EditGist id={id} gist={gist} close={() => setEditing(\"\")} />\r\n-          ) : (\r\n-            <>\r\n-              <h3>{gist.file}</h3>\r\n-\r\n-              <SyntaxHighlighter\r\n-                style={style}\r\n-                language={getLanguage(gist.file)}\r\n-              >\r\n-                {gist.code}\r\n-              </SyntaxHighlighter>\r\n-\r\n-              <button type=\"button\" onClick={() => setEditing(id)}>\r\n-                Edit\r\n-              </button>\r\n-            </>\r\n-          )}\r\n-        </li>\r\n-      ))}\r\n-    </ul>\r\n-  );\r\n-}\r\n-\r\n-function AddGist({ uid }: { uid: string }) {\r\n-  const [file, setFile] = useState(\"\");\r\n-  const [code, setCode] = useState(\"\");\r\n-\r\n-  const onSubmit = async (e: FormEvent<HTMLFormElement>) => {\r\n-    e.preventDefault();\r\n-\r\n-    const gistRef = database.ref(\"gists\").push();\r\n-    await database.ref(`userGists/${uid}/${gistRef.key}`).set(true);\r\n-    await gistRef.set({\r\n-      uid,\r\n-      file,\r\n-      code,\r\n-    });\r\n-\r\n-    setFile(\"\");\r\n-    setCode(\"\");\r\n-  };\r\n-\r\n-  return (\r\n-    <form onSubmit={onSubmit}>\r\n-      <h2>Add Gist</h2>\r\n-\r\n-      <input\r\n-        required\r\n-        type=\"text\"\r\n-        value={file}\r\n-        onChange={(e) => setFile(e.target.value)}\r\n-        placeholder=\"file.js\"\r\n-      />\r\n-\r\n-      <textarea\r\n-        required\r\n-        value={code}\r\n-        onChange={(e) => setCode(e.target.value)}\r\n-      />\r\n-\r\n-      <button type=\"submit\">Save</button>\r\n-    </form>\r\n-  );\r\n-}\r\n-\r\n-function EditGist({\r\n-  id,\r\n-  gist,\r\n-  close,\r\n-}: {\r\n-  id: string;\r\n-  gist: IGist;\r\n-  close: () => void;\r\n-}) {\r\n-  const [file, setFile] = useState(gist.file);\r\n-  const [code, setCode] = useState(gist.code);\r\n-\r\n-  const onSubmit = async (e: FormEvent<HTMLFormElement>) => {\r\n-    e.preventDefault();\r\n-\r\n-    const gistRef = database.ref(`gists/${id}`);\r\n-    gistRef.child(\"file\").set(file);\r\n-    gistRef.child(\"code\").set(code);\r\n-\r\n-    close();\r\n-  };\r\n-\r\n-  return (\r\n-    <form onSubmit={onSubmit}>\r\n-      <input\r\n-        required\r\n-        type=\"text\"\r\n-        value={file}\r\n-        onChange={(e) => setFile(e.target.value)}\r\n-        placeholder=\"file.js\"\r\n-      />\r\n-\r\n-      <textarea\r\n-        required\r\n-        value={code}\r\n-        onChange={(e) => setCode(e.target.value)}\r\n-      />\r\n-\r\n-      <button type=\"submit\">Save</button>\r\n-    </form>\r\n-  );\r\n-}\n-import { useState, useEffect, FormEvent } from \"react\";\r\n-import { database } from \"../modules/firebase/initialiseFirebase\";\r\n-\r\n-\r\n-\r\n-export default function Home() {\r\n-  const { user, loading, logout } = useAuth();\r\n-\r\n-  if (loading) return null;\r\n-  if (!user) return <FirebaseAuth />;\r\n-\r\n-  return (\r\n-    <main>\r\n-      <button type=\"button\" onClick={logout} className=\"link\">\r\n-        Logout\r\n-      </button>\r\n-      <AddGist uid={user.uid} />\r\n-      <Gists uid={user.uid} />\r\n-    </main>\r\n-  );\r\n-}\r\n-\r\n-interface IGist {\r\n-  uid: string;\r\n-  file: string;\r\n-  code: string;\r\n-}\r\n-\r\n-const langs: Record<string, string> = {\r\n-  js: \"javascript\",\r\n-  rb: \"ruby\",\r\n-};\r\n-\r\n-function getLanguage(file: string): string {\r\n-  const parts = file.split(\".\");\r\n-  const ext = parts[parts.length - 1];\r\n-  return langs[ext] || \"text\";\r\n-}\r\n-\r\n-function Gists({ uid }: { uid: string }) {\r\n-  const [gists, setGists] = useState<Record<string, IGist>>({});\r\n-  const [editing, setEditing] = useState(\"\");\r\n-\r\n-  useEffect(() => {\r\n-    const userGistsRef = database.ref(`userGists/${uid}`);\r\n-    const refs = [userGistsRef];\r\n-\r\n-    userGistsRef.on(\"child_added\", (child) => {\r\n-      const key: string = child.key as string;\r\n-      const gistRef = database.ref(`gists/${key}`);\r\n-      refs.push(gistRef);\r\n-      gistRef.on(\"value\", (snap) => {\r\n-        setGists((old) => {\r\n-          return { ...old, [key]: snap.val() };\r\n-        });\r\n-      });\r\n-    });\r\n-\r\n-    return () => {\r\n-      refs.forEach((ref) => ref.off());\r\n-    };\r\n-  }, []);\r\n-\r\n-  return (\r\n-    <ul>\r\n-      {Object.entries(gists).map(([id, gist]) => (\r\n-        <li key={id}>\r\n-          {id === editing ? (\r\n-            <EditGist id={id} gist={gist} close={() => setEditing(\"\")} />\r\n-          ) : (\r\n-            <>\r\n-              <h3>{gist.file}</h3>\r\n-\r\n-              <SyntaxHighlighter\r\n-                style={style}\r\n-                language={getLanguage(gist.file)}\r\n-              >\r\n-                {gist.code}\r\n-              </SyntaxHighlighter>\r\n-\r\n-              <button type=\"button\" onClick={() => setEditing(id)}>\r\n-                Edit\r\n-              </button>\r\n-            </>\r\n-          )}\r\n-        </li>\r\n-      ))}\r\n-    </ul>\r\n-  );\r\n-}\r\n-\r\n-function AddGist({ uid }: { uid: string }) {\r\n-  const [file, setFile] = useState(\"\");\r\n-  const [code, setCode] = useState(\"\");\r\n-\r\n-  const onSubmit = async (e: FormEvent<HTMLFormElement>) => {\r\n-    e.preventDefault();\r\n-\r\n-    const gistRef = database.ref(\"gists\").push();\r\n-    await database.ref(`userGists/${uid}/${gistRef.key}`).set(true);\r\n-    await gistRef.set({\r\n-      uid,\r\n-      file,\r\n-      code,\r\n-    });\r\n-\r\n-    setFile(\"\");\r\n-    setCode(\"\");\r\n-  };\r\n-\r\n-  return (\r\n-    <form onSubmit={onSubmit}>\r\n-      <h2>Add Gist</h2>\r\n-\r\n-      <input\r\n-        required\r\n-        type=\"text\"\r\n-        value={file}\r\n-        onChange={(e) => setFile(e.target.value)}\r\n-        placeholder=\"file.js\"\r\n-      />\r\n-\r\n-      <textarea\r\n-        required\r\n-        value={code}\r\n-        onChange={(e) => setCode(e.target.value)}\r\n-      />\r\n-\r\n-      <button type=\"submit\">Save</button>\r\n-    </form>\r\n-  );\r\n-}\r\n-\r\n-function EditGist({\r\n-  id,\r\n-  gist,\r\n-  close,\r\n-}: {\r\n-  id: string;\r\n-  gist: IGist;\r\n-  close: () => void;\r\n-}) {\r\n-  const [file, setFile] = useState(gist.file);\r\n-  const [code, setCode] = useState(gist.code);\r\n-\r\n-  const onSubmit = async (e: FormEvent<HTMLFormElement>) => {\r\n-    e.preventDefault();\r\n-\r\n-    const gistRef = database.ref(`gists/${id}`);\r\n-    gistRef.child(\"file\").set(file);\r\n-    gistRef.child(\"code\").set(code);\r\n-\r\n-    close();\r\n-  };\r\n-\r\n-  return (\r\n-    <form onSubmit={onSubmit}>\r\n-      <input\r\n-        required\r\n-        type=\"text\"\r\n-        value={file}\r\n-        onChange={(e) => setFile(e.target.value)}\r\n-        placeholder=\"file.js\"\r\n-      />\r\n-\r\n-      <textarea\r\n-        required\r\n-        value={code}\r\n-        onChange={(e) => setCode(e.target.value)}\r\n-      />\r\n-\r\n-      <button type=\"submit\">Save</button>\r\n-    </form>\r\n-  );\r\n-}\n-import { useState, useEffect, FormEvent } from \"react\";\r\n-import { database } from \"../modules/firebase/initialiseFirebase\";\r\n-\r\n-const database = database;\r\n-\r\n-export default function Home() {\r\n-  const { user, loading, logout } = useAuth();\r\n-\r\n-  if (loading) return null;\r\n-  if (!user) return <FirebaseAuth />;\r\n-\r\n-  return (\r\n-    <main>\r\n-      <button type=\"button\" onClick={logout} className=\"link\">\r\n-        Logout\r\n-      </button>\r\n-      <AddGist uid={user.uid} />\r\n-      <Gists uid={user.uid} />\r\n-    </main>\r\n-  );\r\n-}\r\n-\r\n-interface IGist {\r\n-  uid: string;\r\n-  file: string;\r\n-  code: string;\r\n-}\r\n-\r\n-const langs: Record<string, string> = {\r\n-  js: \"javascript\",\r\n-  rb: \"ruby\",\r\n-};\r\n-\r\n-function getLanguage(file: string): string {\r\n-  const parts = file.split(\".\");\r\n-  const ext = parts[parts.length - 1];\r\n-  return langs[ext] || \"text\";\r\n-}\r\n-\r\n-function Gists({ uid }: { uid: string }) {\r\n-  const [gists, setGists] = useState<Record<string, IGist>>({});\r\n-  const [editing, setEditing] = useState(\"\");\r\n-\r\n-  useEffect(() => {\r\n-    const userGistsRef = database.ref(`userGists/${uid}`);\r\n-    const refs = [userGistsRef];\r\n-\r\n-    userGistsRef.on(\"child_added\", (child) => {\r\n-      const key: string = child.key as string;\r\n-      const gistRef = database.ref(`gists/${key}`);\r\n-      refs.push(gistRef);\r\n-      gistRef.on(\"value\", (snap) => {\r\n-        setGists((old) => {\r\n-          return { ...old, [key]: snap.val() };\r\n-        });\r\n-      });\r\n-    });\r\n-\r\n-    return () => {\r\n-      refs.forEach((ref) => ref.off());\r\n-    };\r\n-  }, []);\r\n-\r\n-  return (\r\n-    <ul>\r\n-      {Object.entries(gists).map(([id, gist]) => (\r\n-        <li key={id}>\r\n-          {id === editing ? (\r\n-            <EditGist id={id} gist={gist} close={() => setEditing(\"\")} />\r\n-          ) : (\r\n-            <>\r\n-              <h3>{gist.file}</h3>\r\n-\r\n-              <SyntaxHighlighter\r\n-                style={style}\r\n-                language={getLanguage(gist.file)}\r\n-              >\r\n-                {gist.code}\r\n-              </SyntaxHighlighter>\r\n-\r\n-              <button type=\"button\" onClick={() => setEditing(id)}>\r\n-                Edit\r\n-              </button>\r\n-            </>\r\n-          )}\r\n-        </li>\r\n-      ))}\r\n-    </ul>\r\n-  );\r\n-}\r\n-\r\n-function AddGist({ uid }: { uid: string }) {\r\n-  const [file, setFile] = useState(\"\");\r\n-  const [code, setCode] = useState(\"\");\r\n-\r\n-  const onSubmit = async (e: FormEvent<HTMLFormElement>) => {\r\n-    e.preventDefault();\r\n-\r\n-    const gistRef = database.ref(\"gists\").push();\r\n-    await database.ref(`userGists/${uid}/${gistRef.key}`).set(true);\r\n-    await gistRef.set({\r\n-      uid,\r\n-      file,\r\n-      code,\r\n-    });\r\n-\r\n-    setFile(\"\");\r\n-    setCode(\"\");\r\n-  };\r\n-\r\n-  return (\r\n-    <form onSubmit={onSubmit}>\r\n-      <h2>Add Gist</h2>\r\n-\r\n-      <input\r\n-        required\r\n-        type=\"text\"\r\n-        value={file}\r\n-        onChange={(e) => setFile(e.target.value)}\r\n-        placeholder=\"file.js\"\r\n-      />\r\n-\r\n-      <textarea\r\n-        required\r\n-        value={code}\r\n-        onChange={(e) => setCode(e.target.value)}\r\n-      />\r\n-\r\n-      <button type=\"submit\">Save</button>\r\n-    </form>\r\n-  );\r\n-}\r\n-\r\n-function EditGist({\r\n-  id,\r\n-  gist,\r\n-  close,\r\n-}: {\r\n-  id: string;\r\n-  gist: IGist;\r\n-  close: () => void;\r\n-}) {\r\n-  const [file, setFile] = useState(gist.file);\r\n-  const [code, setCode] = useState(gist.code);\r\n-\r\n-  const onSubmit = async (e: FormEvent<HTMLFormElement>) => {\r\n-    e.preventDefault();\r\n-\r\n-    const gistRef = database.ref(`gists/${id}`);\r\n-    gistRef.child(\"file\").set(file);\r\n-    gistRef.child(\"code\").set(code);\r\n-\r\n-    close();\r\n-  };\r\n-\r\n-  return (\r\n-    <form onSubmit={onSubmit}>\r\n-      <input\r\n-        required\r\n-        type=\"text\"\r\n-        value={file}\r\n-        onChange={(e) => setFile(e.target.value)}\r\n-        placeholder=\"file.js\"\r\n-      />\r\n-\r\n-      <textarea\r\n-        required\r\n-        value={code}\r\n-        onChange={(e) => setCode(e.target.value)}\r\n-      />\r\n-\r\n-      <button type=\"submit\">Save</button>\r\n-    </form>\r\n-  );\r\n-}\n-import { useState, useEffect, FormEvent } from \"react\";\r\n-\r\n-const db = da;\r\n-\r\n-export default function Home() {\r\n-  const { user, loading, logout } = useAuth();\r\n-\r\n-  if (loading) return null;\r\n-  if (!user) return <FirebaseAuth />;\r\n-\r\n-  return (\r\n-    <main>\r\n-      <button type=\"button\" onClick={logout} className=\"link\">\r\n-        Logout\r\n-      </button>\r\n-      <AddGist uid={user.uid} />\r\n-      <Gists uid={user.uid} />\r\n-    </main>\r\n-  );\r\n-}\r\n-\r\n-interface IGist {\r\n-  uid: string;\r\n-  file: string;\r\n-  code: string;\r\n-}\r\n-\r\n-const langs: Record<string, string> = {\r\n-  js: \"javascript\",\r\n-  rb: \"ruby\",\r\n-};\r\n-\r\n-function getLanguage(file: string): string {\r\n-  const parts = file.split(\".\");\r\n-  const ext = parts[parts.length - 1];\r\n-  return langs[ext] || \"text\";\r\n-}\r\n-\r\n-function Gists({ uid }: { uid: string }) {\r\n-  const [gists, setGists] = useState<Record<string, IGist>>({});\r\n-  const [editing, setEditing] = useState(\"\");\r\n-\r\n-  useEffect(() => {\r\n-    const userGistsRef = db.ref(`userGists/${uid}`);\r\n-    const refs = [userGistsRef];\r\n-\r\n-    userGistsRef.on(\"child_added\", (child) => {\r\n-      const key: string = child.key as string;\r\n-      const gistRef = db.ref(`gists/${key}`);\r\n-      refs.push(gistRef);\r\n-      gistRef.on(\"value\", (snap) => {\r\n-        setGists((old) => {\r\n-          return { ...old, [key]: snap.val() };\r\n-        });\r\n-      });\r\n-    });\r\n-\r\n-    return () => {\r\n-      refs.forEach((ref) => ref.off());\r\n-    };\r\n-  }, []);\r\n-\r\n-  return (\r\n-    <ul>\r\n-      {Object.entries(gists).map(([id, gist]) => (\r\n-        <li key={id}>\r\n-          {id === editing ? (\r\n-            <EditGist id={id} gist={gist} close={() => setEditing(\"\")} />\r\n-          ) : (\r\n-            <>\r\n-              <h3>{gist.file}</h3>\r\n-\r\n-              <SyntaxHighlighter\r\n-                style={style}\r\n-                language={getLanguage(gist.file)}\r\n-              >\r\n-                {gist.code}\r\n-              </SyntaxHighlighter>\r\n-\r\n-              <button type=\"button\" onClick={() => setEditing(id)}>\r\n-                Edit\r\n-              </button>\r\n-            </>\r\n-          )}\r\n-        </li>\r\n-      ))}\r\n-    </ul>\r\n-  );\r\n-}\r\n-\r\n-function AddGist({ uid }: { uid: string }) {\r\n-  const [file, setFile] = useState(\"\");\r\n-  const [code, setCode] = useState(\"\");\r\n-\r\n-  const onSubmit = async (e: FormEvent<HTMLFormElement>) => {\r\n-    e.preventDefault();\r\n-\r\n-    const gistRef = db.ref(\"gists\").push();\r\n-    await db.ref(`userGists/${uid}/${gistRef.key}`).set(true);\r\n-    await gistRef.set({\r\n-      uid,\r\n-      file,\r\n-      code,\r\n-    });\r\n-\r\n-    setFile(\"\");\r\n-    setCode(\"\");\r\n-  };\r\n-\r\n-  return (\r\n-    <form onSubmit={onSubmit}>\r\n-      <h2>Add Gist</h2>\r\n-\r\n-      <input\r\n-        required\r\n-        type=\"text\"\r\n-        value={file}\r\n-        onChange={(e) => setFile(e.target.value)}\r\n-        placeholder=\"file.js\"\r\n-      />\r\n-\r\n-      <textarea\r\n-        required\r\n-        value={code}\r\n-        onChange={(e) => setCode(e.target.value)}\r\n-      />\r\n-\r\n-      <button type=\"submit\">Save</button>\r\n-    </form>\r\n-  );\r\n-}\r\n-\r\n-function EditGist({\r\n-  id,\r\n-  gist,\r\n-  close,\r\n-}: {\r\n-  id: string;\r\n-  gist: IGist;\r\n-  close: () => void;\r\n-}) {\r\n-  const [file, setFile] = useState(gist.file);\r\n-  const [code, setCode] = useState(gist.code);\r\n-\r\n-  const onSubmit = async (e: FormEvent<HTMLFormElement>) => {\r\n-    e.preventDefault();\r\n-\r\n-    const gistRef = db.ref(`gists/${id}`);\r\n-    gistRef.child(\"file\").set(file);\r\n-    gistRef.child(\"code\").set(code);\r\n-\r\n-    close();\r\n-  };\r\n-\r\n-  return (\r\n-    <form onSubmit={onSubmit}>\r\n-      <input\r\n-        required\r\n-        type=\"text\"\r\n-        value={file}\r\n-        onChange={(e) => setFile(e.target.value)}\r\n-        placeholder=\"file.js\"\r\n-      />\r\n-\r\n-      <textarea\r\n-        required\r\n-        value={code}\r\n-        onChange={(e) => setCode(e.target.value)}\r\n-      />\r\n-\r\n-      <button type=\"submit\">Save</button>\r\n-    </form>\r\n-  );\r\n-}\n-import { useState, useEffect, FormEvent } from \"react\";\r\n-\r\n-const db = firebase.database();\r\n-\r\n-export default function Home() {\r\n-  const { user, loading, logout } = useAuth();\r\n-\r\n-  if (loading) return null;\r\n-  if (!user) return <FirebaseAuth />;\r\n-\r\n-  return (\r\n-    <main>\r\n-      <button type=\"button\" onClick={logout} className=\"link\">\r\n-        Logout\r\n-      </button>\r\n-      <AddGist uid={user.uid} />\r\n-      <Gists uid={user.uid} />\r\n-    </main>\r\n-  );\r\n-}\r\n-\r\n-interface IGist {\r\n-  uid: string;\r\n-  file: string;\r\n-  code: string;\r\n-}\r\n-\r\n-const langs: Record<string, string> = {\r\n-  js: \"javascript\",\r\n-  rb: \"ruby\",\r\n-};\r\n-\r\n-function getLanguage(file: string): string {\r\n-  const parts = file.split(\".\");\r\n-  const ext = parts[parts.length - 1];\r\n-  return langs[ext] || \"text\";\r\n-}\r\n-\r\n-function Gists({ uid }: { uid: string }) {\r\n-  const [gists, setGists] = useState<Record<string, IGist>>({});\r\n-  const [editing, setEditing] = useState(\"\");\r\n-\r\n-  useEffect(() => {\r\n-    const userGistsRef = db.ref(`userGists/${uid}`);\r\n-    const refs = [userGistsRef];\r\n-\r\n-    userGistsRef.on(\"child_added\", (child) => {\r\n-      const key: string = child.key as string;\r\n-      const gistRef = db.ref(`gists/${key}`);\r\n-      refs.push(gistRef);\r\n-      gistRef.on(\"value\", (snap) => {\r\n-        setGists((old) => {\r\n-          return { ...old, [key]: snap.val() };\r\n-        });\r\n-      });\r\n-    });\r\n-\r\n-    return () => {\r\n-      refs.forEach((ref) => ref.off());\r\n-    };\r\n-  }, []);\r\n-\r\n-  return (\r\n-    <ul>\r\n-      {Object.entries(gists).map(([id, gist]) => (\r\n-        <li key={id}>\r\n-          {id === editing ? (\r\n-            <EditGist id={id} gist={gist} close={() => setEditing(\"\")} />\r\n-          ) : (\r\n-            <>\r\n-              <h3>{gist.file}</h3>\r\n-\r\n-              <SyntaxHighlighter\r\n-                style={style}\r\n-                language={getLanguage(gist.file)}\r\n-              >\r\n-                {gist.code}\r\n-              </SyntaxHighlighter>\r\n-\r\n-              <button type=\"button\" onClick={() => setEditing(id)}>\r\n-                Edit\r\n-              </button>\r\n-            </>\r\n-          )}\r\n-        </li>\r\n-      ))}\r\n-    </ul>\r\n-  );\r\n-}\r\n-\r\n-function AddGist({ uid }: { uid: string }) {\r\n-  const [file, setFile] = useState(\"\");\r\n-  const [code, setCode] = useState(\"\");\r\n-\r\n-  const onSubmit = async (e: FormEvent<HTMLFormElement>) => {\r\n-    e.preventDefault();\r\n-\r\n-    const gistRef = db.ref(\"gists\").push();\r\n-    await db.ref(`userGists/${uid}/${gistRef.key}`).set(true);\r\n-    await gistRef.set({\r\n-      uid,\r\n-      file,\r\n-      code,\r\n-    });\r\n-\r\n-    setFile(\"\");\r\n-    setCode(\"\");\r\n-  };\r\n-\r\n-  return (\r\n-    <form onSubmit={onSubmit}>\r\n-      <h2>Add Gist</h2>\r\n-\r\n-      <input\r\n-        required\r\n-        type=\"text\"\r\n-        value={file}\r\n-        onChange={(e) => setFile(e.target.value)}\r\n-        placeholder=\"file.js\"\r\n-      />\r\n-\r\n-      <textarea\r\n-        required\r\n-        value={code}\r\n-        onChange={(e) => setCode(e.target.value)}\r\n-      />\r\n-\r\n-      <button type=\"submit\">Save</button>\r\n-    </form>\r\n-  );\r\n-}\r\n-\r\n-function EditGist({\r\n-  id,\r\n-  gist,\r\n-  close,\r\n-}: {\r\n-  id: string;\r\n-  gist: IGist;\r\n-  close: () => void;\r\n-}) {\r\n-  const [file, setFile] = useState(gist.file);\r\n-  const [code, setCode] = useState(gist.code);\r\n-\r\n-  const onSubmit = async (e: FormEvent<HTMLFormElement>) => {\r\n-    e.preventDefault();\r\n-\r\n-    const gistRef = db.ref(`gists/${id}`);\r\n-    gistRef.child(\"file\").set(file);\r\n-    gistRef.child(\"code\").set(code);\r\n-\r\n-    close();\r\n-  };\r\n-\r\n-  return (\r\n-    <form onSubmit={onSubmit}>\r\n-      <input\r\n-        required\r\n-        type=\"text\"\r\n-        value={file}\r\n-        onChange={(e) => setFile(e.target.value)}\r\n-        placeholder=\"file.js\"\r\n-      />\r\n-\r\n-      <textarea\r\n-        required\r\n-        value={code}\r\n-        onChange={(e) => setCode(e.target.value)}\r\n-      />\r\n-\r\n-      <button type=\"submit\">Save</button>\r\n-    </form>\r\n-  );\r\n-}\n-import { useState, useEffect, FormEvent } from \"react\";\r\n-import SyntaxHighlighter from \"react-syntax-highlighter\";\r\n-import { atomOneDark as style } from \"react-syntax-highlighter/dist/cjs/styles/hljs\";\r\n-import { firebase } from \"src/initFirebase\";\r\n-import FirebaseAuth from \"src/firebaseAuth\";\r\n-import { useAuth } from \"src/authProvider\";\r\n-\r\n-const db = firebase.database();\r\n-\r\n-export default function Home() {\r\n-  const { user, loading, logout } = useAuth();\r\n-\r\n-  if (loading) return null;\r\n-  if (!user) return <FirebaseAuth />;\r\n-\r\n-  return (\r\n-    <main>\r\n-      <button type=\"button\" onClick={logout} className=\"link\">\r\n-        Logout\r\n-      </button>\r\n-      <AddGist uid={user.uid} />\r\n-      <Gists uid={user.uid} />\r\n-    </main>\r\n-  );\r\n-}\r\n-\r\n-interface IGist {\r\n-  uid: string;\r\n-  file: string;\r\n-  code: string;\r\n-}\r\n-\r\n-const langs: Record<string, string> = {\r\n-  js: \"javascript\",\r\n-  rb: \"ruby\",\r\n-};\r\n-\r\n-function getLanguage(file: string): string {\r\n-  const parts = file.split(\".\");\r\n-  const ext = parts[parts.length - 1];\r\n-  return langs[ext] || \"text\";\r\n-}\r\n-\r\n-function Gists({ uid }: { uid: string }) {\r\n-  const [gists, setGists] = useState<Record<string, IGist>>({});\r\n-  const [editing, setEditing] = useState(\"\");\r\n-\r\n-  useEffect(() => {\r\n-    const userGistsRef = db.ref(`userGists/${uid}`);\r\n-    const refs = [userGistsRef];\r\n-\r\n-    userGistsRef.on(\"child_added\", (child) => {\r\n-      const key: string = child.key as string;\r\n-      const gistRef = db.ref(`gists/${key}`);\r\n-      refs.push(gistRef);\r\n-      gistRef.on(\"value\", (snap) => {\r\n-        setGists((old) => {\r\n-          return { ...old, [key]: snap.val() };\r\n-        });\r\n-      });\r\n-    });\r\n-\r\n-    return () => {\r\n-      refs.forEach((ref) => ref.off());\r\n-    };\r\n-  }, []);\r\n-\r\n-  return (\r\n-    <ul>\r\n-      {Object.entries(gists).map(([id, gist]) => (\r\n-        <li key={id}>\r\n-          {id === editing ? (\r\n-            <EditGist id={id} gist={gist} close={() => setEditing(\"\")} />\r\n-          ) : (\r\n-            <>\r\n-              <h3>{gist.file}</h3>\r\n-\r\n-              <SyntaxHighlighter\r\n-                style={style}\r\n-                language={getLanguage(gist.file)}\r\n-              >\r\n-                {gist.code}\r\n-              </SyntaxHighlighter>\r\n-\r\n-              <button type=\"button\" onClick={() => setEditing(id)}>\r\n-                Edit\r\n-              </button>\r\n-            </>\r\n-          )}\r\n-        </li>\r\n-      ))}\r\n-    </ul>\r\n-  );\r\n-}\r\n-\r\n-function AddGist({ uid }: { uid: string }) {\r\n-  const [file, setFile] = useState(\"\");\r\n-  const [code, setCode] = useState(\"\");\r\n-\r\n-  const onSubmit = async (e: FormEvent<HTMLFormElement>) => {\r\n-    e.preventDefault();\r\n-\r\n-    const gistRef = db.ref(\"gists\").push();\r\n-    await db.ref(`userGists/${uid}/${gistRef.key}`).set(true);\r\n-    await gistRef.set({\r\n-      uid,\r\n-      file,\r\n-      code,\r\n-    });\r\n-\r\n-    setFile(\"\");\r\n-    setCode(\"\");\r\n-  };\r\n-\r\n-  return (\r\n-    <form onSubmit={onSubmit}>\r\n-      <h2>Add Gist</h2>\r\n-\r\n-      <input\r\n-        required\r\n-        type=\"text\"\r\n-        value={file}\r\n-        onChange={(e) => setFile(e.target.value)}\r\n-        placeholder=\"file.js\"\r\n-      />\r\n-\r\n-      <textarea\r\n-        required\r\n-        value={code}\r\n-        onChange={(e) => setCode(e.target.value)}\r\n-      />\r\n-\r\n-      <button type=\"submit\">Save</button>\r\n-    </form>\r\n-  );\r\n-}\r\n-\r\n-function EditGist({\r\n-  id,\r\n-  gist,\r\n-  close,\r\n-}: {\r\n-  id: string;\r\n-  gist: IGist;\r\n-  close: () => void;\r\n-}) {\r\n-  const [file, setFile] = useState(gist.file);\r\n-  const [code, setCode] = useState(gist.code);\r\n-\r\n-  const onSubmit = async (e: FormEvent<HTMLFormElement>) => {\r\n-    e.preventDefault();\r\n-\r\n-    const gistRef = db.ref(`gists/${id}`);\r\n-    gistRef.child(\"file\").set(file);\r\n-    gistRef.child(\"code\").set(code);\r\n-\r\n-    close();\r\n-  };\r\n-\r\n-  return (\r\n-    <form onSubmit={onSubmit}>\r\n-      <input\r\n-        required\r\n-        type=\"text\"\r\n-        value={file}\r\n-        onChange={(e) => setFile(e.target.value)}\r\n-        placeholder=\"file.js\"\r\n-      />\r\n-\r\n-      <textarea\r\n-        required\r\n-        value={code}\r\n-        onChange={(e) => setCode(e.target.value)}\r\n-      />\r\n-\r\n-      <button type=\"submit\">Save</button>\r\n-    </form>\r\n-  );\r\n-}\n-import { useRouter } from \"next/dist/client/router\";\r\n-import { useEffect } from \"react\";\r\n-import { useAuth } from \"../modules/contexts/authContext\";\r\n-\r\n-export default function Profile() {\r\n-    const { authUser, loading } = useAuth();\r\n-  const router = useRouter();\r\n-\r\n-  // Listen for changes on loading and authUser, redirect if needed\r\n-  useEffect(() => {\r\n-    if (!loading || !authUser)\r\n-      router.push('/authentication')\r\n-  }, [authUser, loading])\r\n-\r\n-  return (\r\n-    <div>\r\n-        Logged In\r\n-    </div>\r\n-  )\r\n-}\n-import { useRouter } from \"next/dist/client/router\";\r\n-import { useEffect } from \"react\";\r\n-import { useAuth } from \"../modules/contexts/authContext\";\r\n-\r\n-export default function Profile() {\r\n-    const { authUser, loading } = useAuth();\r\n-  const router = useRouter();\r\n-\r\n-  // Listen for changes on loading and authUser, redirect if needed\r\n-  useEffect(() => {\r\n-    if (loading && !authUser)\r\n-      router.push('/authentication')\r\n-  }, [authUser, loading])\r\n-\r\n-  return (\r\n-    <div>\r\n-        Logged In\r\n-    </div>\r\n-  )\r\n-}\n-import { useRouter } from \"next/dist/client/router\";\r\n-import { useEffect } from \"react\";\r\n-import { useAuth } from \"../modules/contexts/authContext\";\r\n-\r\n-export default function Profile() {\r\n-    const { authUser, loading } = useAuth();\r\n-  const router = useRouter();\r\n-\r\n-  // Listen for changes on loading and authUser, redirect if needed\r\n-  useEffect(() => {\r\n-    if (!loading && !authUser)\r\n-      router.push('/authentication')\r\n-  }, [authUser, loading])\r\n-\r\n-  return (\r\n-    <div>\r\n-        Logged In\r\n-    </div>\r\n-  )\r\n-}\n-import { useRouter } from \"next/dist/client/router\";\r\n-import { useEffect } from \"react\";\r\n-import { useAuth } from \"../modules/contexts/authContext\";\r\n-\r\n-export default function Profile() {\r\n-    const { authUser, loading } = useAuth();\r\n-  const router = useRouter();\r\n-\r\n-  // Listen for changes on loading and authUser, redirect if needed\r\n-  useEffect(() => {\r\n-    if (!loading | !authUser)\r\n-      router.push('/authentication')\r\n-  }, [authUser, loading])\r\n-\r\n-  return (\r\n-    <div>\r\n-        Logged In\r\n-    </div>\r\n-  )\r\n-}\n-import { useRouter } from \"next/dist/client/router\";\r\n-import { useEffect } from \"react\";\r\n-\r\n-export default function Profile() {\r\n-    const { authUser, loading } = useAuth();\r\n-  const router = useRouter();\r\n-\r\n-  // Listen for changes on loading and authUser, redirect if needed\r\n-  useEffect(() => {\r\n-    if (!loading && !authUser)\r\n-      router.push('/authentication')\r\n-  }, [authUser, loading])\r\n-\r\n-  return (\r\n-    <div>\r\n-        Logged In\r\n-    </div>\r\n-  )\r\n-}\n-import { useEffect } from \"react\";\r\n-\r\n-export default function Profile() {\r\n-    const { authUser, loading } = useAuth();\r\n-  const router = useRouter();\r\n-\r\n-  // Listen for changes on loading and authUser, redirect if needed\r\n-  useEffect(() => {\r\n-    if (!loading && !authUser)\r\n-      router.push('/authentication')\r\n-  }, [authUser, loading])\r\n-\r\n-  return (\r\n-    <div>\r\n-        Logged In\r\n-    </div>\r\n-  )\r\n-}\n-export default function Profile() {\r\n-    const { authUser, loading } = useAuth();\r\n-  const router = useRouter();\r\n-\r\n-  // Listen for changes on loading and authUser, redirect if needed\r\n-  useEffect(() => {\r\n-    if (!loading && !authUser)\r\n-      router.push('/authentication')\r\n-  }, [authUser, loading])\r\n-\r\n-  return (\r\n-    <div>\r\n-        Logged In\r\n-    </div>\r\n-  )\r\n-}\n-export default function Profile() {\r\n-    return (\r\n-        <div>\r\n-            Enter\r\n-        </div>\r\n-    );\r\n-}\n-export default function() {\r\n-    return (\r\n-        <div>\r\n-            Enter\r\n-        </div>\r\n-    );\r\n-}\n import { useEffect } from 'react';\r\n import { useRouter } from 'next/router';\r\n-import { useAuth } from '../modules/contexts/authContext';\r\n+import { useAuth } from '../context/AuthUserContext';\r\n \r\n \r\n-export const Profile = () => {\r\n-  const { authUser, loading } = useAuth();\r\n-  const router = useRouter();\r\n-\r\n-  // Listen for changes on loading and authUser, redirect if needed\r\n-  useEffect(() => {\r\n-    if (!loading && !authUser)\r\n-      router.push('/authentication')\r\n-  }, [authUser, loading])\r\n-\r\n-  return (\r\n-    <div>\r\n-        Logged In\r\n-    </div>\r\n-  )\r\n-}\n-import { useEffect } from 'react';\r\n-import { useRouter } from 'next/router';\r\n-import { useAuth } from '../modules/contexts/authContext';\r\n-\r\n-\r\n export const LoggedIn = () => {\r\n   const { authUser, loading } = useAuth();\r\n   const router = useRouter();\r\n \r\n   // Listen for changes on loading and authUser, redirect if needed\r\n   useEffect(() => {\r\n     if (!loading && !authUser)\r\n-      router.push('/authentication')\r\n-  }, [authUser, loading])\r\n-\r\n-  return (\r\n-    <div>\r\n-        Logged In\r\n-    </div>\r\n-  )\r\n-}\n-import { useEffect } from 'react';\r\n-import { useRouter } from 'next/router';\r\n-\r\n-\r\n-export const LoggedIn = () => {\r\n-  const { authUser, loading } = useAuth();\r\n-  const router = useRouter();\r\n-\r\n-  // Listen for changes on loading and authUser, redirect if needed\r\n-  useEffect(() => {\r\n-    if (!loading && !authUser)\r\n-      router.push('/authentication')\r\n-  }, [authUser, loading])\r\n-\r\n-  return (\r\n-    <div>\r\n-        Logged In\r\n-    </div>\r\n-  )\r\n-}\n-import { useEffect } from 'react';\r\n-import { useRouter } from 'next/router';\r\n-\r\n-\r\n-export const LoggedIn = () => {\r\n-  const { authUser, loading } = useAuth();\r\n-  const router = useRouter();\r\n-\r\n-  // Listen for changes on loading and authUser, redirect if needed\r\n-  useEffect(() => {\r\n-    if (!loading && !authUser)\r\n       router.push('/')\r\n   }, [authUser, loading])\r\n \r\n   return (\r\n-    <div>\r\n-        Logged In\r\n-    </div>\r\n+    //Your logged in page\r\n   )\r\n-}\n-import { useEffect } from 'react';\r\n-import { useRouter } from 'next/router';\r\n-\r\n-\r\n-export const LoggedIn = () => {\r\n-  const { authUser, loading } = useAuth();\r\n-  const router = useRouter();\r\n-\r\n-  // Listen for changes on loading and authUser, redirect if needed\r\n-  useEffect(() => {\r\n-    if (!loading && !authUser)\r\n-      router.push('/')\r\n-  }, [authUser, loading])\r\n-\r\n-  return (\r\n-    <div>\r\n-        \r\n-    </div>\r\n-  )\r\n-}\n-import { useEffect } from 'react';\r\n-import { useRouter } from 'next/router';\r\n-\r\n-\r\n-export const LoggedIn = () => {\r\n-  const { authUser, loading } = useAuth();\r\n-  const router = useRouter();\r\n-\r\n-  // Listen for changes on loading and authUser, redirect if needed\r\n-  useEffect(() => {\r\n-    if (!loading && !authUser)\r\n-      router.push('/')\r\n-  }, [authUser, loading])\r\n-\r\n-  return (\r\n-    <div></\r\n-  )\r\n-}\n-import { useEffect } from 'react';\r\n-import { useRouter } from 'next/router';\r\n-\r\n-\r\n-export const LoggedIn = () => {\r\n-  const { authUser, loading } = useAuth();\r\n-  const router = useRouter();\r\n-\r\n-  // Listen for changes on loading and authUser, redirect if needed\r\n-  useEffect(() => {\r\n-    if (!loading && !authUser)\r\n-      router.push('/')\r\n-  }, [authUser, loading])\r\n-\r\n-  return (\r\n-    <//Your logged in page>\r\n-  )\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1630181737397,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n import { useEffect } from 'react';\r\n import { useRouter } from 'next/router';\r\n-import { useAuth } from '../context/AuthUserContext';\r\n \r\n \r\n export const LoggedIn = () => {\r\n   const { authUser, loading } = useAuth();\r\n@@ -13,7 +12,9 @@\n       router.push('/')\r\n   }, [authUser, loading])\r\n \r\n   return (\r\n-    //Your logged in page\r\n+    <div>\r\n+        Logged\r\n+    </div>\r\n   )\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1630181742962,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,20 @@\n+import { useEffect } from 'react';\r\n+import { useRouter } from 'next/router';\r\n+\r\n+\r\n+export const LoggedIn = () => {\r\n+  const { authUser, loading } = useAuth();\r\n+  const router = useRouter();\r\n+\r\n+  // Listen for changes on loading and authUser, redirect if needed\r\n+  useEffect(() => {\r\n+    if (!loading && !authUser)\r\n+      router.push('/')\r\n+  }, [authUser, loading])\r\n+\r\n+  return (\r\n+    <div>\r\n+        Logged\r\n+    </div>\r\n+  )\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1630274542953,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import { useEffect } from 'react';\r\n import { useRouter } from 'next/router';\r\n+import { useAuth } from '../modules/contexts/authContext';\r\n \r\n \r\n export const LoggedIn = () => {\r\n   const { authUser, loading } = useAuth();\r\n@@ -12,29 +13,41 @@\n       router.push('/')\r\n   }, [authUser, loading])\r\n \r\n   return (\r\n-    <div>\r\n-        Logged\r\n-    </div>\r\n-  )\r\n-}\n-import { useEffect } from 'react';\r\n-import { useRouter } from 'next/router';\r\n+    \r\n+<div class=\"w-full h-screen font-sans bg-cover bg-landscape\">\r\n+    <div class=\"container flex items-center justify-center flex-1 h-full mx-auto\">\r\n+        <div class=\"w-full max-w-lg\">\r\n+            <div class=\"leading-loose\">\r\n+                <form class=\"max-w-sm p-10 m-auto bg-white bg-opacity-25 rounded shadow-xl\">\r\n+                    <p class=\"mb-8 text-2xl font-light text-center text-white\">\r\n+                        Login\r\n+                    </p>\r\n+                    <div class=\"mb-2\">\r\n+                        <div class=\" relative \">\r\n+                            <input type=\"text\" id=\"login-with-bg-email\" class=\" rounded-lg border-transparent flex-1 appearance-none border border-gray-300 w-full py-2 px-4 bg-white text-gray-700 placeholder-gray-400 shadow-sm text-base focus:outline-none focus:ring-2 focus:ring-purple-600 focus:border-transparent\" placeholder=\"email\"/>\r\n+                            </div>\r\n+                        </div>\r\n+                        <div class=\"mb-2\">\r\n+                            <div class=\" relative \">\r\n+                                <input type=\"text\" id=\"login-with-bg-password\" class=\" rounded-lg border-transparent flex-1 appearance-none border border-gray-300 w-full py-2 px-4 bg-white text-gray-700 placeholder-gray-400 shadow-sm text-base focus:outline-none focus:ring-2 focus:ring-purple-600 focus:border-transparent\" placeholder=\"password\"/>\r\n+                                </div>\r\n+                            </div>\r\n+                            <div class=\"flex items-center justify-between mt-4\">\r\n+                                <button type=\"submit\" class=\"py-2 px-4  bg-indigo-600 hover:bg-indigo-700 focus:ring-indigo-500 focus:ring-offset-indigo-200 text-white w-full transition ease-in duration-200 text-center text-base font-semibold shadow-md focus:outline-none focus:ring-2 focus:ring-offset-2  rounded-lg \">\r\n+                                    Validate\r\n+                                </button>\r\n+                            </div>\r\n+                            <div class=\"text-center\">\r\n+                                <a class=\"right-0 inline-block text-sm font-light align-baseline text-500 hover:text-gray-800\">\r\n+                                    Create an account\r\n+                                </a>\r\n+                            </div>\r\n+                        </form>\r\n+                    </div>\r\n+                </div>\r\n+            </div>\r\n+        </div>\r\n \r\n-\r\n-export const LoggedIn = () => {\r\n-  const { authUser, loading } = useAuth();\r\n-  const router = useRouter();\r\n-\r\n-  // Listen for changes on loading and authUser, redirect if needed\r\n-  useEffect(() => {\r\n-    if (!loading && !authUser)\r\n-      router.push('/')\r\n-  }, [authUser, loading])\r\n-\r\n-  return (\r\n-    <div>\r\n-        Logged\r\n-    </div>\r\n   )\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1630274576173,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,33 +14,33 @@\n   }, [authUser, loading])\r\n \r\n   return (\r\n     \r\n-<div class=\"w-full h-screen font-sans bg-cover bg-landscape\">\r\n-    <div class=\"container flex items-center justify-center flex-1 h-full mx-auto\">\r\n-        <div class=\"w-full max-w-lg\">\r\n-            <div class=\"leading-loose\">\r\n-                <form class=\"max-w-sm p-10 m-auto bg-white bg-opacity-25 rounded shadow-xl\">\r\n-                    <p class=\"mb-8 text-2xl font-light text-center text-white\">\r\n+<div className=\"w-full h-screen font-sans bg-cover bg-landscape\">\r\n+    <div className=\"container flex items-center justify-center flex-1 h-full mx-auto\">\r\n+        <div className=\"w-full max-w-lg\">\r\n+            <div className=\"leading-loose\">\r\n+                <form className=\"max-w-sm p-10 m-auto bg-white bg-opacity-25 rounded shadow-xl\">\r\n+                    <p className=\"mb-8 text-2xl font-light text-center text-white\">\r\n                         Login\r\n                     </p>\r\n-                    <div class=\"mb-2\">\r\n-                        <div class=\" relative \">\r\n-                            <input type=\"text\" id=\"login-with-bg-email\" class=\" rounded-lg border-transparent flex-1 appearance-none border border-gray-300 w-full py-2 px-4 bg-white text-gray-700 placeholder-gray-400 shadow-sm text-base focus:outline-none focus:ring-2 focus:ring-purple-600 focus:border-transparent\" placeholder=\"email\"/>\r\n+                    <div className=\"mb-2\">\r\n+                        <div className=\" relative \">\r\n+                            <input type=\"text\" id=\"login-with-bg-email\" className=\" rounded-lg border-transparent flex-1 appearance-none border border-gray-300 w-full py-2 px-4 bg-white text-gray-700 placeholder-gray-400 shadow-sm text-base focus:outline-none focus:ring-2 focus:ring-purple-600 focus:border-transparent\" placeholder=\"email\"/>\r\n                             </div>\r\n                         </div>\r\n-                        <div class=\"mb-2\">\r\n-                            <div class=\" relative \">\r\n-                                <input type=\"text\" id=\"login-with-bg-password\" class=\" rounded-lg border-transparent flex-1 appearance-none border border-gray-300 w-full py-2 px-4 bg-white text-gray-700 placeholder-gray-400 shadow-sm text-base focus:outline-none focus:ring-2 focus:ring-purple-600 focus:border-transparent\" placeholder=\"password\"/>\r\n+                        <div className=\"mb-2\">\r\n+                            <div className=\" relative \">\r\n+                                <input type=\"text\" id=\"login-with-bg-password\" className=\" rounded-lg border-transparent flex-1 appearance-none border border-gray-300 w-full py-2 px-4 bg-white text-gray-700 placeholder-gray-400 shadow-sm text-base focus:outline-none focus:ring-2 focus:ring-purple-600 focus:border-transparent\" placeholder=\"password\"/>\r\n                                 </div>\r\n                             </div>\r\n-                            <div class=\"flex items-center justify-between mt-4\">\r\n-                                <button type=\"submit\" class=\"py-2 px-4  bg-indigo-600 hover:bg-indigo-700 focus:ring-indigo-500 focus:ring-offset-indigo-200 text-white w-full transition ease-in duration-200 text-center text-base font-semibold shadow-md focus:outline-none focus:ring-2 focus:ring-offset-2  rounded-lg \">\r\n+                            <div className=\"flex items-center justify-between mt-4\">\r\n+                                <button type=\"submit\" className=\"py-2 px-4  bg-indigo-600 hover:bg-indigo-700 focus:ring-indigo-500 focus:ring-offset-indigo-200 text-white w-full transition ease-in duration-200 text-center text-base font-semibold shadow-md focus:outline-none focus:ring-2 focus:ring-offset-2  rounded-lg \">\r\n                                     Validate\r\n                                 </button>\r\n                             </div>\r\n-                            <div class=\"text-center\">\r\n-                                <a class=\"right-0 inline-block text-sm font-light align-baseline text-500 hover:text-gray-800\">\r\n+                            <div className=\"text-center\">\r\n+                                <a className=\"right-0 inline-block text-sm font-light align-baseline text-500 hover:text-gray-800\">\r\n                                     Create an account\r\n                                 </a>\r\n                             </div>\r\n                         </form>\r\n"
                },
                {
                    "date": 1630274606634,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n import { useEffect } from 'react';\r\n import { useRouter } from 'next/router';\r\n-import { useAuth } from '../modules/contexts/authContext';\r\n \r\n \r\n export const LoggedIn = () => {\r\n   const { authUser, loading } = useAuth();\r\n"
                }
            ],
            "date": 1630172913711,
            "name": "Commit-0",
            "content": "import { useEffect } from 'react';\r\nimport { useRouter } from 'next/router';\r\nimport { useAuth } from '../context/AuthUserContext';\r\n\r\nimport {Container, Row, Col} from 'reactstrap';\r\n\r\nconst LoggedIn = () => {\r\n  const { authUser, loading } = useAuth();\r\n  const router = useRouter();\r\n\r\n  // Listen for changes on loading and authUser, redirect if needed\r\n  useEffect(() => {\r\n    if (!loading && !authUser)\r\n      router.push('/')\r\n  }, [authUser, loading])\r\n\r\n  return (\r\n    //Your logged in page\r\n  )\r\n}"
        }
    ]
}